<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>My Account | Supreme</title>
    <!-- <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/css/bootstrap.min.css" rel="stylesheet"> -->
    <!-- <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css"> -->

    <!-- <link href="/css2/bootstrap.min.css" rel="stylesheet"> -->
    <!-- <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css" rel="stylesheet"> -->
    <!-- <link href="/css2/tiny-slider.css" rel="stylesheet"> -->
    <!-- <link href="/css2/style.css" rel="stylesheet"> -->
    <link href="/css/account.css" rel="stylesheet">
    <!-- <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet"> -->
    <!-- <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/sweetalert2@11/dist/sweetalert2.min.css"> -->


    <style>
      
    </style>
</head>

<body>
    <%- include('../partials/userNavbar') %>

    
        <div class="account-container">
            <h1 class="page-title">My Account</h1>

            <div class="row">
                <!-- Sidebar - My Account Section -->
                <div class="col-lg-3 col-md-4">
                    <div class="sidebar">
                        <!-- Orders Section -->
                        <div class="sidebar-section">
                            <h3 class="sidebar-title">My Account</h3>
                            <ul class="sidebar-menu">
                                <li>
                                    <a href="/user/account" class="active">
                                        <i class="fas fa-box"></i> Orders
                                    </a>

                                </li>
                                <li>
                                    <a href="/user/wallet">
                                        <i class="fas fa-wallet"></i> Wallet
                                    </a>
                                </li>
                                <li>
                                    <a href="/user/referral">
                                        <i class="fas fa-user-plus"></i> Invite Friends
                                    </a>
                                    <p class="invite-subtitle">Earn 100 points for every friend</p>
                                </li>
                               
                            </ul>
                        </div>

                        <!-- Profile Section -->
                        <div class="sidebar-section">
                            <h3 class="sidebar-title">Profile</h3>
                            <ul class="sidebar-menu">
                                <li>
                                    <a href="/user/profile">
                                        <i class="fas fa-user"></i> Personal Information
                                    </a>
                                </li>
                                <li>
                                    <a href="/user/address">
                                        <i class="fas fa-address-book"></i> Address Book
                                    </a>
                                </li>
                                
                            </ul>
                        </div>
                    </div>
                </div>

                <!-- Main Content - My Orders Section -->
                <div class="col-lg-9 col-md-8">
                    <div class="orders-container">



                      <!-- <div class="d-flex justify-content-between align-items-center mb-4">
                        <h2 class="h4 mb-0">My Orders</h2>
                        <div class="dropdown">
                            <button class="btn btn-outline-secondary dropdown-toggle" type="button" id="orderFilterDropdown" data-bs-toggle="dropdown" aria-expanded="false">
                                Filter Orders
                            </button>



                            <ul class="dropdown-menu" aria-labelledby="orderFilterDropdown">
                                <li><a class="dropdown-item" href="#">All Orders</a></li>
                                <li><a class="dropdown-item" href="#">Pending</a></li>
                                <li><a class="dropdown-item" href="#">Processing</a></li>
                                <li><a class="dropdown-item" href="#">Shipped</a></li>
                                <li><a class="dropdown-item" href="#">Delivered</a></li>
                                <li><a class="dropdown-item" href="#">Cancelled</a></li>
                            </ul>
                        </div>
                    </div> -->




                    <div class="row">
                      <% if (orders && orders.length > 0) { %>
                        <% orders.forEach(order => { %>
                          <div class="col-xl-6 col-lg-12 mb-4">
                            <div class="order-card" id="order-<%= order._id %>">
                              <div class="order-header">
                                <span class="order-id">Order #<%= order.orderID %></span>
                                <span class="order-status <%= order.orderStatus.toLowerCase().replace(/\s+/g, '-') %>">
                                  <%= order.orderStatus %>
                                </span>
                              </div>
                    
                              <% order.products.forEach(product => { %>
                                <div class="row align-items-center mb-3">
                                  <div class="col-md-4 col-sm-4">
                                    <img src="<%= product.image %>" alt="<%= product.name %>" class="order-image">
                                  </div>
                                  <div class="col-md-8 col-sm-8">
                                    <div class="order-details">
                                      <p class="order-product"><%= product.name %></p>
                                      <p><i class="far fa-calendar-alt me-2"></i>Placed on: <%= new Date(order.orderDate).toDateString() %></p>
                                      <p><i class="fas fa-truck me-2"></i>Expected by: <%= new Date(new Date(order.orderDate).setDate(new Date(order.orderDate).getDate() + 7)).toDateString() %></p>
                                      
                                      <div class="d-flex flex-wrap gap-2 mt-3">
                                        <% if (product.productStatus !== "Cancelled" && product.productStatus !== "Delivered" && product.productStatus !== "Cancellation Requested" && product.productStatus !== "Return Requested"    && product.productStatus !== "Returned" ) { %>  
                                          <button type="button" class="btn btn-warning btn-sm cancel-product-btn"
                                            data-bs-toggle="modal" 
                                            data-bs-target="#cancelOrderModal" 
                                            data-order-id="<%= order._id %>" 
                                            data-product-id="<%= product.product %>">
                                            <i class="fas fa-ban me-1"></i> Cancel
                                          </button>
                                        <% } %>
                                        <% if(product.productStatus === "Delivered") { %>
                                          <a href="/user/return/<%= order._id %>/<%= product.product %>?name=<%= encodeURIComponent(product.name) %>&orderID=<%= order.orderID %>" 
                                             class="btn btn-warning btn-sm return-product-btn">
                                            <i class="fas fa-undo me-1"></i> Return
                                          </a>
                                        <% } %>
                                      </div>
                                    </div>
                                  </div>
                                </div>
                                <% if (order.products.indexOf(product) !== order.products.length - 1) { %>
                                  <hr class="my-3">
                                <% } %>
                              <% }) %>
                    
                              <div class="order-actions d-flex flex-wrap justify-content-between align-items-center">
                                <% if (order.orderStatus === 'Pending' || order.orderStatus === 'Processing'  || order.orderStatus === 'Confirmed') { %>
                                  <button type="button" class="btn btn-danger btn-sm cancel-order-btn"
                                    data-bs-toggle="modal" 
                                    data-bs-target="#cancelOrderModal"
                                    data-order-id="<%= order._id %>">
                                    <i class="fas fa-times me-1"></i> Cancel Order
                                  </button>
                                <% } else { %>
                                  <div></div> 
                                <% } %>
                    
                                <div class="container mt-2">
                                  <button class="btn btn-primary view-details" id="view" data-order-id="<%= order._id %>">
                                    View Details
                                  </button>
                                </div>
                              </div>
                            </div>
                          </div>
                        <% }) %>
                      <% } else { %>
                        <div class="col-12">
                          <div class="empty-orders">
                            <i class="fas fa-shopping-bag"></i>
                            <h3>No Orders Yet</h3>
                            <p>You haven't placed any orders yet. Start shopping to see your orders here!</p>
                            <a href="/user/shop" class="btn btn-primary mt-3">Start Shopping</a>
                          </div>
                        </div>
                      <% } %>
                    </div>
                    
                    <!-- Pagination -->
                    <div class="pagination-container">
                      <nav aria-label="Page navigation">
                        <ul class="pagination justify-content-center">
                          <li class="page-item <%= hasPrevPage ? '' : 'disabled' %>">
                            <a class="page-link" href="?page=<%= currentPage - 1 %>" aria-label="Previous">
                              <span aria-hidden="true">«</span>
                            </a>
                          </li>
                          
                          <% for(let i = 1; i <= totalPages; i++) { %>
                            <li class="page-item <%= currentPage === i ? 'active' : '' %>">
                              <a class="page-link" href="?page=<%= i %>"><%= i %></a>
                            </li>
                          <% } %>
                          
                          <li class="page-item <%= hasNextPage ? '' : 'disabled' %>">
                            <a class="page-link" href="?page=<%= currentPage + 1 %>" aria-label="Next">
                              <span aria-hidden="true">»</span>
                            </a>
                          </li>
                        </ul>
                      </nav>
                    </div>
                    
                    <script>
                      document.addEventListener("DOMContentLoaded", function () {
                        document.querySelectorAll(".view-details").forEach(button => {
                          button.addEventListener("click", function () {
                            const orderId = this.getAttribute("data-order-id");
                            if (orderId) {
                              window.location.href = `/user/details/${orderId}`;
                            } else {
                              console.error("Order ID not found!");
                            }
                          });
                        });
                      });
                    </script>

                      </div>
                </div>
            </div>
        </div>





 <div class="modal fade" id="cancelOrderModal" tabindex="-1" aria-labelledby="cancelOrderModalLabel" aria-hidden="true">
  <div class="modal-dialog modal-dialog-centered">
      <div class="modal-content">
          <div class="modal-header">
              <h5 class="modal-title" id="cancelOrderModalLabel">Cancel Order/Product</h5>
              <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
          </div>
          <div class="modal-body">
              <div class="order-details mb-4">
                  <div class="row">
                      <div class="col-12 mb-3">
                          <small class="text-muted">Order</small>
                          <p class="mb-0 fw-medium" id="modalOrderId"></p>
                      </div>
                  </div>
              </div>

              <form id="cancelForm">
                  <div class="mb-4">
                      <label for="cancelReason" class="form-label">Please select a reason for cancellation</label>
                      <select class="form-select" id="cancelReason" name="cancelReason" required>
                          <option value="" selected disabled>Select a reason</option>
                          <option value="Changed my mind">Changed my mind</option>
                          <option value="Found a better price elsewhere">Found a better price elsewhere</option>
                          <option value="Delivery time is too long">Delivery time is too long</option>
                          <option value="Ordered wrong size/color">Ordered wrong size/color</option>
                          <option value="Payment or billing issues">Payment or billing issues</option>
                          <option value="Other">Other</option>
                      </select>
                  </div>

                  <div class="mb-4 d-none" id="otherReasonContainer">
                      <label for="otherReason" class="form-label">Please specify your reason</label>
                      <textarea class="form-control" id="otherReason" name="otherReason" rows="3" placeholder="Tell us why you're cancelling..."></textarea>
                  </div>

                  <input type="hidden" id="orderId" name="orderId">
                  <input type="hidden" id="productId" name="productId">

                  <div class="alert alert-warning">
                      <small>
                          <i class="bi bi-exclamation-triangle-fill me-2"></i>
                          Your cancellation request will be submitted for admin approval. Refunds, if applicable, will be processed to your wallet upon approval.
                      </small>
                  </div>
              </form>
          </div>
          <div class="modal-footer">
              <button type="button" class="btn btn-outline-secondary" data-bs-dismiss="modal">Keep Order</button>
              <button type="button" class="btn btn-primary" id="confirmCancelBtn">Submit Cancellation Request</button>
          </div>
      </div>
  </div>
</div>

<!-- Success Modal -->
<div class="modal fade fade-scale" id="successModal" tabindex="-1" aria-hidden="true" data-bs-backdrop="static">
  <div class="modal-dialog modal-dialog-centered">
      <div class="modal-content">
          <div class="modal-body p-0">
              <div class="success-message">
                  <div class="success-icon">
                      <svg xmlns="http://www.w3.org/2000/svg" width="36" height="36" fill="white" class="bi bi-check-lg" viewBox="0 0 16 16">
                          <path d="M12.736 3.97a.733.733 0 0 1 1.047 0c.286.289.29.756.01 1.05L7.88 12.01a.733.733 0 0 1-1.065.02L3.217 8.384a.757.757 0 0 1 0-1.06.733.733 0 0 1 1.047 0l3.052 3.093 5.4-6.425a.247.247 0 0 1 .02-.022Z"/>
                      </svg>
                  </div>
                  <h4 class="success-title">Cancellation Request Submitted</h4>
                  <p class="success-text">Your cancellation request for order #<span id="successOrderId"></span> has been submitted.<br>You’ll be notified once it’s approved by the admin.</p>
                  <button type="button" class="btn btn-primary" data-bs-dismiss="modal">Continue Shopping</button>
              </div>
          </div>
      </div>
  </div>
</div>





          <%- include('../partials/userFooter') %>



        <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js"></script>
        <!-- <script src="/js/account.js"></script> -->
        <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
        <script>
          document.addEventListener("DOMContentLoaded", function () {
              const cancelButtons = document.querySelectorAll('.cancel-order-btn, .cancel-product-btn');
              const confirmCancelBtn = document.getElementById('confirmCancelBtn');
              const otherReasonContainer = document.getElementById('otherReasonContainer');
              const cancelReasonSelect = document.getElementById('cancelReason');
      
              // Populate modal with order/product data and status
              cancelButtons.forEach(button => {
                  button.addEventListener('click', function () {
                      const orderId = this.getAttribute('data-order-id');
                      const productId = this.getAttribute('data-product-id') || '';
                      const status = this.getAttribute('data-status'); // Ensure this matches EJS attribute
                      console.log('Button clicked - Order ID:', orderId, 'Product ID:', productId, 'Status:', status);
                      
                      if (!status) {
                          console.error('Status is missing from button attributes');
                      }
      
                      document.getElementById('orderId').value = orderId;
                      document.getElementById('productId').value = productId;
                      document.getElementById('modalOrderId').textContent = orderId;
                      document.getElementById('cancelForm').dataset.status = status || 'Unknown'; // Fallback
      
                      // Update modal warning text based on status
                      const isInstant = ['Pending', 'Processing'].includes(status);
                      const warningText = isInstant 
                          ? 'This will cancel the order/product immediately.'
                          : 'Your cancellation request will be submitted for admin approval. Refunds, if applicable, will be processed to your wallet upon approval.';
                      document.querySelector('.alert-warning small').textContent = warningText;
                  });
              });
      
              // Show/hide other reason textarea
              cancelReasonSelect.addEventListener('change', function () {
                  console.log('Reason selected:', this.value);
                  otherReasonContainer.classList.toggle('d-none', this.value !== 'Other');
              });
      
              // Submit cancellation request
              confirmCancelBtn.addEventListener('click', async function () {
                  const orderId = document.getElementById('orderId').value;
                  const productId = document.getElementById('productId').value;
                  let status = document.getElementById('cancelForm').dataset.status;
                  let cancelReason = document.getElementById('cancelReason').value;
      
                  console.log('Form submission - Order ID:', orderId, 'Product ID:', productId, 'Status:', status);
      
                  if (!orderId) {
                      console.error('Order ID is missing');
                      alert('Order ID is missing. Please try again.');
                      return;
                  }
      
                  if (!cancelReason) {
                      console.error('Cancellation reason is required');
                      alert('Please select a cancellation reason.');
                      return;
                  }
      
                  if (cancelReason === 'Other') {
                      cancelReason = document.getElementById('otherReason').value || "No specific reason provided";
                      if (!cancelReason.trim()) {
                          console.error('Other reason is empty');
                          alert('Please specify a reason for "Other".');
                          return;
                      }
                  }
      
                  // Handle missing or invalid status
                  if (!status || status === 'Unknown') {
                      console.error('Status is null or undefined, defaulting to request cancellation');
                      status = 'Delivered'; // Default to request cancellation as a safe fallback
                  }
      
                  let url;
                  const instantStatuses = ['Pending', 'Processing'];
                  const requestStatuses = ['Shipped', 'Delivered'];
      
                  if (instantStatuses.includes(status)) {
                      url = productId ? `/user/order/instant-cancel-product/${orderId}/${productId}` : `/user/order/instant-cancel/${orderId}`;
                  } else if (requestStatuses.includes(status)) {
                      url = productId ? `/user/order/cancel-product/${orderId}/${productId}` : `/user/order/cancel/${orderId}`;
                  } else {
                      console.error('Cancellation not allowed for status:', status);
                      alert(`Cancellation is not allowed for status: ${status}`);
                      return;
                  }
      
                  console.log('Submitting request to URL:', url);
                  console.log('Request body:', { cancelReason });
      
                  try {
                      const response = await fetch(url, {
                          method: 'PUT',
                          headers: { 'Content-Type': 'application/json' },
                          body: JSON.stringify({ cancelReason })
                      });
      
                      console.log('Response status:', response.status);
                      const data = await response.json();
                      console.log('Response data:', data);
      
                      if (response.ok) {
                          const cancelModal = bootstrap.Modal.getInstance(document.getElementById('cancelOrderModal'));
                          if (cancelModal) cancelModal.hide();
      
                          document.getElementById('successOrderId').textContent = orderId;
                          const isInstant = instantStatuses.includes(status);
                          const successTitle = isInstant ? 'Cancellation Successful' : 'Cancellation Request Submitted';
                          const successText = isInstant 
                              ? `Your ${productId ? 'product' : 'order'} #${orderId} has been cancelled successfully.` 
                              : `Your cancellation request for ${productId ? 'product' : 'order'} #${orderId} has been submitted.<br>You’ll be notified once it’s approved by the admin.`;
                          document.querySelector('#successModal .success-title').textContent = successTitle;
                          document.querySelector('#successModal .success-text').innerHTML = successText;
      
                          const successModal = new bootstrap.Modal(document.getElementById('successModal'));
                          successModal.show();
      
                          setTimeout(() => {
                              window.location.reload();
                          }, 2000);
                      } else {
                          console.error('Server error:', data.message || 'Unknown error');
                          alert(`Error: ${data.message || 'Failed to process cancellation'}`);
                      }
                  } catch (error) {
                      console.error('Fetch error:', error.message, error.stack);
                      alert(`Error submitting cancellation request: ${error.message}. Check console for details.`);
                  }
              });
      



              // Clean up success modal on hide
              document.getElementById('successModal').addEventListener('hidden.bs.modal', function () {
                  document.body.classList.remove('modal-open');
                  document.querySelectorAll('.modal-backdrop').forEach(el => el.remove());
              });
          });




         
    // // Function to fetch and display orders based on filter
    // async function filterOrders(status) {
    //     try {
    //         // Show loading indicator (optional)
    //         Swal.fire({
    //             title: "Loading...",
    //             text: "Fetching your orders",
    //             allowOutsideClick: false,
    //             didOpen: () => {
    //                 Swal.showLoading();
    //             }
    //         });

    //         // Construct URL with status filter
    //         const url = status === "All Orders" ? "/user/orders" : `/user/orders?status=${encodeURIComponent(status)}`;
    //         const response = await fetch(url, {
    //             method: "GET",
    //             headers: { "Content-Type": "application/json" }
    //         });

    //         if (!response.ok) {
    //             throw new Error("Failed to fetch orders");
    //         }

    //         const orders = await response.json();

    //         // Close loading indicator
    //         Swal.close();

    //         // Update the orders display
    //         updateOrdersDisplay(orders);

    //     } catch (error) {
    //         Swal.fire({
    //             icon: "error",
    //             title: "Error",
    //             text: error.message || "Failed to load orders",
    //             toast: true,
    //             position: "top-end",
    //             showConfirmButton: false,
    //             timer: 1500,
    //             background: '#F4F7F7'
    //         });
    //     }
    // }

    // // Function to update the orders display on the page
    // function updateOrdersDisplay(orders) {
    //     const container = document.getElementById("ordersContainer"); // Adjust ID as needed
    //     if (!container) {
    //         console.error("Orders container not found");
    //         return;
    //     }

    //     if (!orders || orders.length === 0) {
    //         container.innerHTML = '<p class="text-muted">No orders found for this filter.</p>';
    //         return;
    //     }

    //     // Generate HTML for orders (customize based on your order structure)
    //     container.innerHTML = orders.map(order => `
    //         <div class="card mb-3">
    //             <div class="card-body">
    //                 <h5 class="card-title">Order #${order.orderID}</h5>
    //                 <p class="card-text">
    //                     <strong>Date:</strong> ${new Date(order.orderDate).toLocaleDateString()}<br>
    //                     <strong>Total:</strong> ₹${order.totalAmount}<br>
    //                     <strong>Status:</strong> ${order.orderStatus}
    //                 </p>
    //                 <button class="btn btn-outline-primary" onclick="showOrderDetails('${order._id}')">View Details</button>
    //             </div>
    //         </div>
    //     `).join("");
    // }

    // // Function to show order details in modal (optional, if you use the modal)
    // function showOrderDetails(orderId) {
    //     fetch(`/user/order-details/${orderId}`)
    //         .then(response => response.json())
    //         .then(order => {
    //             document.getElementById("modalOrderId").textContent = order.orderID;
    //             document.getElementById("modalOrderDate").textContent = new Date(order.orderDate).toLocaleDateString();
    //             document.getElementById("modalTotalAmount").textContent = `₹${order.totalAmount}`;
    //             document.getElementById("modalOrderStatus").textContent = order.orderStatus;
    //             document.getElementById("modalShipping").textContent = `${order.shippingAddress.fullName}, ${order.shippingAddress.address}, ${order.shippingAddress.city}`;

    //             const productsList = document.getElementById("modalProducts");
    //             productsList.innerHTML = order.products.map(product => `
    //                 <li class="list-group-item">${product.name} - Qty: ${product.quantity} - ₹${product.price}</li>
    //             `).join("");

    //             // Show the modal
    //             const modal = new bootstrap.Modal(document.getElementById("orderDetailsModal"));
    //             modal.show();
    //         })
    //         .catch(error => {
    //             Swal.fire({
    //                 icon: "error",
    //                 title: "Error",
    //                 text: "Failed to load order details",
    //                 toast: true,
    //                 position: "top-end",
    //                 showConfirmButton: false,
    //                 timer: 1500,
    //                 background: '#F4F7F7'
    //             });
    //         });
    // }

    // // Attach event listeners to dropdown items
    // document.addEventListener("DOMContentLoaded", () => {
    //     const dropdownItems = document.querySelectorAll(".dropdown-item");
    //     dropdownItems.forEach(item => {
    //         item.addEventListener("click", (e) => {
    //             e.preventDefault(); // Prevent default link behavior
    //             const status = item.textContent.trim();
    //             document.getElementById("orderFilterDropdown").textContent = `Filter: ${status}`; // Update button text
    //             filterOrders(status);
    //         });
    //     });

    //     // Load all orders by default
    //     filterOrders("All Orders");
    // });





//sorting, need to implement


    // document.addEventListener("DOMContentLoaded", () => {
    //     const dropdownItems = document.querySelectorAll(".dropdown-item");
    //     dropdownItems.forEach(item => {
    //         item.addEventListener("click", (e) => {
    //             e.preventDefault();
    //             const status = item.textContent.trim();
    //             document.getElementById("orderFilterDropdown").textContent = `Filter: ${status}`;
    //             // Redirect with status filter
    //             window.location.href = `/user/account?status=${encodeURIComponent(status)}`;
    //         });
    //     });
    // });



//okok

//           document.addEventListener('DOMContentLoaded', function() {
//   const returnProductModal = document.getElementById('returnProductModal');

//   if (returnProductModal) {
//     returnProductModal.addEventListener('show.bs.modal', function(event) {
//       const button = event.relatedTarget;
//       const orderId = button.getAttribute('data-order-id');
//       const productId = button.getAttribute('data-product-id');
//       const productName = button.getAttribute('data-product-name');
//       const orderIdOrg = button.getAttribute('data-orderOrg-id'); // Fixed typo

//       console.log('Button clicked - Order ID:', orderId, 'Product ID:', productId, 'Product Name:', productName);

//       returnProductModal.querySelector('#modalOrderId').textContent = orderIdOrg;
//       returnProductModal.querySelector('#modalProductName').textContent = productName;
//       returnProductModal.querySelector('#orderId').value = orderId;
//       returnProductModal.querySelector('#productId').value = productId;
//     });
//   }

//   const returnReasonSelect = document.getElementById('returnReason');
//   const otherReturnReasonContainer = document.getElementById('otherReturnReasonContainer');
//   const otherReturnReasonInput = document.getElementById('otherReturnReason');

//   if (returnReasonSelect && otherReturnReasonContainer) {
//     returnReasonSelect.addEventListener('change', function() {
//       if (this.value === 'Other') {
//         otherReturnReasonContainer.classList.remove('d-none');
//         otherReturnReasonInput.setAttribute('required', true);
//       } else {
//         otherReturnReasonContainer.classList.add('d-none');
//         otherReturnReasonInput.removeAttribute('required');
//       }
//     });
//   }

//   const confirmReturnBtn = document.getElementById('confirmReturnBtn');
//   if (confirmReturnBtn) {
//     confirmReturnBtn.addEventListener('click', async function() {
//       const returnForm = document.getElementById('returnForm');

//       if (!returnForm.checkValidity()) {
//         returnForm.reportValidity();
//         return;
//       }

//       // Get form data
//       document.getElementById('orderId').value = returnProductModal.querySelector('#orderId').value;
//   document.getElementById('productId').value = returnProductModal.querySelector('#productId').value;
  
//   console.log("Before submission - Order ID:", document.getElementById('orderIdForReturn').value);
//   console.log("Before submission - Product ID:", document.getElementById('productIdForReturn').value);
//       const returnReason = document.getElementById('returnReason').value;
//       const reason = returnReason === 'Other' ? otherReturnReasonInput.value : returnReason;

//       console.log('Form submission - Order ID:', orderId, 'Product ID:', productId, 'Reason:', reason);

//       const returnData = { reason };

//       // Disable button & show loading state
//       confirmReturnBtn.disabled = true;
//       confirmReturnBtn.innerHTML = '<span class="spinner-border spinner-border-sm" role="status"></span> Processing...';

//       try {
//         const response = await fetch(`/user/order/return-product/${orderId}/${productId}`, {
//           method: 'PUT',
//           headers: { 'Content-Type': 'application/json' },
//           body: JSON.stringify(returnData),
//         });

//         if (!response.ok) throw new Error('Failed to process return request');

//         const data = await response.json();

//         // Show success modal
//         document.getElementById('successReturnOrderId').textContent = orderId;
//         bootstrap.Modal.getInstance(returnProductModal).hide();
//         new bootstrap.Modal(document.getElementById('returnSuccessModal')).show();

//         // Reset form
//         returnForm.reset();
//         otherReturnReasonContainer.classList.add('d-none');
//       } catch (error) {
//         console.error('Error:', error);
//         alert('Error submitting return request. Please try again.');
//       } finally {
//         confirmReturnBtn.disabled = false;
//         confirmReturnBtn.innerHTML = 'Submit Return Request';
//       }
//     });
//   }
// });
        
        
        
        </script>
     
      
      
      
      
      </script>

</body>

</html>