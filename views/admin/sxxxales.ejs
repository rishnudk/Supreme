<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Sales Report Dashboard</title>

    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
            font-family: 'Arial', sans-serif;
        }

        .container {
            padding: 2rem;
            background-color: rgb(249, 250, 251);
            min-height: 100vh;
        }

        .header {
            display: flex;
            align-items: center;
            justify-content: space-between;
            margin-bottom: 2rem;
        }

        .header h1 {
            font-size: 2.25rem;
            font-weight: bold;
            color: rgb(31, 41, 55);
        }

        .period-select {
            padding: 0.75rem;
            border: 1px solid rgb(209, 213, 219);
            border-radius: 0.375rem;
            font-size: 1rem;
        }

        .cards-grid {
            display: grid;
            grid-template-columns: repeat(1, 1fr);
            gap: 1.5rem;
            margin-bottom: 2rem;
        }

        @media (min-width: 768px) {
            .cards-grid {
                grid-template-columns: repeat(2, 1fr);
            }
        }

        @media (min-width: 1024px) {
            .cards-grid {
                grid-template-columns: repeat(4, 1fr);
            }
        }

        .card {
            background: white;
            border-radius: 0.5rem;
            box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
            padding: 1.5rem;
        }

        .card-header {
            display: flex;
            align-items: center;
            justify-content: space-between;
            padding-bottom: 0.75rem;
        }

        .card-title {
            font-size: 1rem;
            font-weight: 500;
            color: rgb(107, 114, 128);
        }

        .card-content .value {
            font-size: 1.875rem;
            font-weight: bold;
            margin-bottom: 0.5rem;
        }

        .card-content .change {
            font-size: 0.875rem;
            color: rgb(34, 197, 94);
        }

        .charts-grid {
            display: grid;
            grid-template-columns: 1fr;
            gap: 2rem;
            margin-bottom: 2rem;
        }

        @media (min-width: 1024px) {
            .charts-grid {
                grid-template-columns: repeat(2, 1fr);
            }
        }

        .chart-container {
            height: 400px;
            padding: 1.5rem;
        }

        .table-card {
            background: white;
            border-radius: 0.5rem;
            box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
            padding: 1.5rem;
            overflow-x: auto;
        }

        .sales-table {
            width: 100%;
            text-align: left;
            font-size: 1rem;
        }

        .sales-table th {
            background-color: rgb(249, 250, 251);
            padding: 1rem;
            font-size: 0.975rem;
        }

        .sales-table td {
            padding: 1rem;
            border-bottom: 1px solid rgb(229, 231, 235);
            font-size: 0.975rem;
        }

        .text-right {
            text-align: right;
        }

        .icon {
            width: 1.5rem;
            height: 1.5rem;
            color: rgb(107, 114, 128);
        }

        .download {
            display: inline-flex;
            align-items: center;
            justify-content: center;
            gap: 0.5rem;
            padding: 0.75rem 1.5rem;
            margin: 0 0.5rem;
            border: none;
            border-radius: 0.375rem;
            background-color: #3b82f6;
            color: white;
            font-weight: 600;
            cursor: pointer;
            transition: all 0.3s ease;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
        }

        .download:hover {
            background-color: #2563eb;
            transform: translateY(-2px);
            box-shadow: 0 6px 8px rgba(0, 0, 0, 0.15);
        }

        .download:active {
            transform: translateY(1px);
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
        }

        .download::before {
            content: '⬇️';
            font-size: 1.2rem;
        }

        .period-selector {
            font-family: 'Arial', sans-serif;
            max-width: 300px;
            margin: 0 auto;
        }

        .period-selector label {
            display: block;
            margin-bottom: 8px;
            font-weight: 600;
            color: #333;
            font-size: 14px;
        }

        .period-selector select {
            width: 100%;
            padding: 10px 15px;
            border: 2px solid #e0e0e0;
            border-radius: 8px;
            background-color: #fff;
            font-size: 16px;
            color: #333;
            appearance: none;
            -webkit-appearance: none;
            -moz-appearance: none;
            cursor: pointer;
            transition: all 0.3s ease;
            background-image: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='24' height='24' viewBox='0 0 24 24' fill='none' stroke='%23888' stroke-width='2' stroke-linecap='round' stroke-linejoin='round'%3E%3Cpolyline points='6 9 12 15 18 9'/%3E%3C/svg%3E");
            background-repeat: no-repeat;
            background-position: right 15px center;
        }

        .period-selector select:focus {
            outline: none;
            border-color: #4a90e2;
            box-shadow: 0 0 0 3px rgba(74, 144, 226, 0.1);
        }

        .period-selector select:hover {
            border-color: #4a90e2;
        }


        @media (max-width: 480px) {
            .period-selector select {
                font-size: 14px;
                padding: 8px 12px;
            }
        }


        @media (prefers-color-scheme: dark) {
            .period-selector select {
                background-color: #2c2c2c;
                color: #f0f0f0;
                border-color: #444;
                background-image: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='24' height='24' viewBox='0 0 24 24' fill='none' stroke='%23aaa' stroke-width='2' stroke-linecap='round' stroke-linejoin='round'%3E%3Cpolyline points='6 9 12 15 18 9'/%3E%3C/svg%3E");
            }

            .period-selector select:focus {
                border-color: #5aa9ff;
                box-shadow: 0 0 0 3px rgba(90, 169, 255, 0.2);
            }
        }

        /* Compact Form Container */
        #reportForm {
            display: flex;
            align-items: center;
            gap: 10px;
            width: 100%;
            max-width: 800px;
            padding: 10px;
            background-color: #f9f9f9;
            border-radius: 6px;
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.05);
        }

        /* Custom Date Range Container */
        .custom-date-range {
            display: flex;
            align-items: center;
            gap: 10px;
            flex-grow: 1;
        }

        /* Date Input Wrapper */
        .date-input {
            display: flex;
            align-items: center;
            gap: 5px;
        }

        /* Label Styling */
        .date-input label {
            font-size: 12px;
            color: #666;
            white-space: nowrap;
        }

        /* Date Input Styling */
        .date-input input[type="date"] {
            width: 130px;
            padding: 6px;
            border: 1px solid #ddd;
            border-radius: 4px;
            font-size: 12px;
        }

        /* Submit Button */
        #reportForm button[type="submit"] {
            padding: 8px 15px;
            background-color: #4a90e2;
            color: white;
            border: none;
            border-radius: 4px;
            font-size: 12px;
            cursor: pointer;
            white-space: nowrap;
        }

        /* Responsive Design */
        @media (max-width: 600px) {
            #reportForm {
                flex-direction: column;
                align-items: stretch;
                gap: 10px;
            }

            .custom-date-range {
                flex-direction: column;
            }

            .date-input {
                width: 100%;
            }

            .date-input input[type="date"] {
                width: 100%;
            }
        }

        /* Container for date inputs */
        .date-input-container {
            display: flex;
            align-items: center;
            gap: 10px;
            margin-bottom: 15px;
        }

        /* Label Styling */
        label[for="startDate"],
        label[for="endDate"] {
            font-size: 14px;
            color: #333;
            margin-right: 8px;
            white-space: nowrap;
        }

        /* Date Input Styling */
        input[type="date"] {
            padding: 8px;
            border: 1px solid #ddd;
            border-radius: 4px;
            font-size: 14px;
            width: 160px;
            appearance: none;
            /* Removes default browser styling */
            background-color: #f9f9f9;
            transition: all 0.3s ease;
        }

        /* Focus State */
        input[type="date"]:focus {
            outline: none;
            border-color: #4a90e2;
            box-shadow: 0 0 0 2px rgba(74, 144, 226, 0.1);
        }

        /* Responsive Design */
        @media (max-width: 600px) {
            .date-input-container {
                flex-direction: column;
                align-items: stretch;
            }

            label[for="startDate"],
            label[for="endDate"] {
                margin-bottom: 5px;
            }

            input[type="date"] {
                width: 100%;
            }
        }

     
        input[type="date"]::-webkit-calendar-picker-indicator {
            background-color: #fff;
            padding: 5px;
            cursor: pointer;
            border-radius: 3px;
        }

        input[type="date"]::-webkit-inner-spin-button,
        input[type="date"]::-webkit-outer-spin-button {
            appearance: none;
            margin: 0;
        }

        .error {
            width: 100%;
            max-width: 500px;
            padding: 12px 15px;
            margin: 10px 0;
            background-color: #f7f7f7;
            color: #d32f2f;
            border-left: 4px solid #ffffff;
            border-radius: 4px;
            font-size: 20px;
            transition: all 0.3s ease;
            display: flex;
            align-items: center;
            gap: 10px;
        }

        .error::before {

            font-size: 20px;
        }

        @keyframes slideIn {
            from {
                opacity: 0;
                transform: translateY(-10px);
            }

            to {
                opacity: 1;
                transform: translateY(0);
            }
        }

        .error {
            animation: slideIn 0.3s ease;
        }


        @media (max-width: 600px) {
            .error {
                margin-left: 10px !important;
                max-width: calc(100% - 20px);
            }
        }
        .dash {
 
    display: inline-flex;
    align-items: center;
    padding: 12px 24px;
    background-color: #4a90e2;
    color: white;
    border: none;
    border-radius: 6px;
    font-size: 16px;
    font-weight: 500;
    cursor: pointer;
    transition: all 0.3s ease;
    text-decoration: none;
    position: relative;
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
    margin-bottom: 150px;
}

.dash::before {

    content: "←";
    margin-right: 8px;
    font-size: 20px;
    transition: transform 0.3s ease;
}


.dash:hover {
    background-color: #357abd;
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
    transform: translateY(-1px);
}

.dash:hover::before {
    transform: translateX(-4px);
}


.dash:active {
    transform: translateY(1px);
    box-shadow: 0 1px 2px rgba(0, 0, 0, 0.1);
}


.dash:focus {
    outline: none;
    box-shadow: 0 0 0 3px rgba(74, 144, 226, 0.3);
}


.toggle-btn {
    position: fixed;
    left: 20px;
    top: 20px;
    z-index: 999;
    padding: 10px 15px;
    border: none;
    background: #333;
    color: white;
    cursor: pointer;
    border-radius: 4px;
}

/* Optional overlay */
.sidenav {
  
    display: none;
}

.toggle-btn {
    position: fixed;
    left: 20px;
    top: 20px;
    z-index: 9999;
    padding: 10px 15px;
    border: none;
    background: #333;
    color: white;
    cursor: pointer;
    border-radius: 4px;
    margin-bottom: 20px;
    margin-left: 80px;
    margin-top: 15px;
}/* Pagination Container */
.pagination-container {
    padding: 1.5rem 0;
    font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, 'Helvetica Neue', Arial, sans-serif;
}

/* Basic Pagination Styling */
.pagination {
    display: inline-flex;
    padding-left: 0;
    list-style: none;
    border-radius: 0.25rem;
    margin: 0;
    gap: 0.25rem;
    margin-left: 1500px;
}

.page-item {
    margin: 0 2px;
}

/* Page Link Styling */
.page-link {
    position: relative;
    display: block;
    padding: 0.5rem 0.75rem;
    font-size: 0.875rem;
    line-height: 1.25;
    color: #007bff;
    background-color: #fff;
    border: 1px solid #dee2e6;
    border-radius: 0.25rem;
    transition: all 0.2s ease-in-out;
    text-decoration: none;
}

/* Hover Effects */
.page-link:hover {
    color: #0056b3;
    background-color: #e9ecef;
    border-color: #dee2e6;
    z-index: 2;
}

/* Active State */
.page-item.active .page-link {
    z-index: 3;
    color: #fff;
    background-color: #007bff;
    border-color: #007bff;
}

/* Disabled State */
.page-item.disabled .page-link {
    color: #6c757d;
    pointer-events: none;
    background-color: #fff;
    border-color: #dee2e6;
}

/* Previous/Next Buttons */
.page-link[href*="prev"],
.page-link[href*="next"] {
    font-weight: 500;
}

/* Page Count Text */
.pagination-container span {
    display: block;
    margin-bottom: 0.5rem;
    font-size: 0.875rem;
}

/* Responsive Adjustments */
@media (max-width: 576px) {
    .pagination {
        gap: 0.125rem;
    }
    
    .page-link {
        padding: 0.375rem 0.625rem;
        font-size: 0.8125rem;
    }
}

/* Optional: Add smooth hover transition */
.page-link {
    box-shadow: 0 0 0 rgba(0,0,0,0);
    transform: translateY(0);
    transition: all 0.2s ease;
}

.page-link:hover {
    box-shadow: 0 2px 4px rgba(0,0,0,0.1);
    transform: translateY(-1px);
}
    </style>
</head>

<body>
    <button onclick="toggleNav()" id="toggleNav" class="toggle-btn">☰ Menu</button>

<div id="mySidenav" class="sidenav">
</div>


    <div class="container">
      
        <div class="header">
      
            <h1 style="margin-top: 50px;">Sales Report</h1>

            <div class="period-selector">
                <label for="period">Select Period:</label>
                <select id="period" name="period">
                    <option value="daily" <%=period==='daily' ? 'selected' : '' %>>Daily</option>
                    <option value="weekly" <%=period==='weekly' ? 'selected' : '' %>>Weekly</option>
                    <option value="monthly" <%=period==='monthly' ? 'selected' : '' %>>Monthly</option>
                    <option value="yearly" <%=period==='yearly' ? 'selected' : '' %>>Yearly</option>
                </select>
            </div>

            <form id="reportForm">

                <div class="custom-date-range">
                    <label for="startDate">Start Date:</label>
                    <input type="date" id="startDate" name="startDate">


                    <label for="endDate">End Date:</label>
                    <input type="date" id="endDate"  name="endDate">

                </div>

                <button type="submit">Get Report</button>

            </form>



            <button class="download" onclick="downloadPDF()">Download PDF</button>
            <button class="download" onclick="downloadExcel()">Download Excel</button>
           

        </div>
        <% if (errorMessage) { %>
            <div class="error" style="color: crimson; margin-left: 100px; display: block;" id="success-alert"
                class="alert alert-success">
                <%= errorMessage %>
            </div>
            <% } else { %>
                <div class="error" style="color: crimson; margin-left: 100px; display: block;" id="success-alert"
                    class="alert alert-success" style="display:none;"></div>
                <% } %>

                    <div class="cards-grid">
                        <div class="card">
                            <div class="card-header">
                              
                                <span class="card-title">Total Sales(period)</span>
                                <svg class="icon" viewBox="0 0 24 24" fill="none" stroke="currentColor"
                                    stroke-width="2">
                                    <path d="M12 2L2 7L12 12L22 7L12 2Z"></path>
                                    <path d="M2 17L12 22L22 17"></path>
                                    <path d="M2 12L12 17L22 12"></path>
                                </svg>
                            </div>
                            <div class="card-content">
                                <div class="value">
                                    <%=SaleTotal%>
                                </div>
                                <div class="change">+12% from last period</div>
                            </div>
                        </div>
                      


                        <div class="card">
                            <div class="card-header">
                                <span class="card-title">Total Orders</span>
                                <svg class="icon" viewBox="0 0 24 24" fill="none" stroke="currentColor"
                                    stroke-width="2">
                                    <rect x="3" y="4" width="18" height="18" rx="2" ry="2"></rect>
                                    <line x1="16" y1="2" x2="16" y2="6"></line>
                                    <line x1="8" y1="2" x2="8" y2="6"></line>
                                    <line x1="3" y1="10" x2="21" y2="10"></line>
                                </svg>
                            </div>
                            <div class="card-content">
                                <div class="value">
                                    <%=totalOrders%>
                                </div>
                                <div class="change">+8% from last period</div>
                            </div>
                        </div>

               

                        <div class="card">
                            <div class="card-header">
                                <span class="card-title">total Products</span>
                                <svg class="icon" viewBox="0 0 24 24" fill="none" stroke="currentColor"
                                    stroke-width="2">
                                    <path d="M23 6L13.5 15.5L8.5 10.5L1 18"></path>
                                    <path d="M17 6H23V12"></path>
                                </svg>
                            </div>
                            <div class="card-content">
                                <div class="value">
                                    <%=totalProducts[0].totalProducts%>
                                </div>
                                <div class="change">+5% from last period</div>
                            </div>
                        </div>


                        <% if (topSellingProducts.length> 0) { %>
                            <div class="card"
                                style="border: 1px solid #ddd; border-radius: 8px; padding: 15px; background: #fff; box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1); max-width: 100%;">
                                <div class="card-header"
                                    style="display: flex; justify-content: space-between; align-items: center; font-size: 18px; font-weight: bold; margin-bottom: 10px;">
                                    <span class="card-title">Top Selling Products</span>
                                    <svg class="icon" viewBox="0 0 24 24" fill="none" stroke="currentColor"
                                        stroke-width="2" style="width: 24px; height: 24px;">
                                        <path d="M23 6L13.5 15.5L8.5 10.5L1 18"></path>
                                        <path d="M17 6H23V12"></path>
                                    </svg>
                                </div>
                                <div class="card-content" style="display: flex; flex-direction: column; gap: 8px;">
                                    <% topSellingProducts.forEach((item)=> { %>
                                        <div class="product-detail" style="font-size: 16px; padding: 5px 0;">
                                            <strong>Product:</strong>
                                            <%= item.name %> |
                                                <strong>Sold:</strong>
                                                <%= item.totalQuantity %> units |
                                                    <strong>Revenue:</strong>
                                                    <%= item.totalRevenue.toFixed(2) %>
                                        </div>
                                        <% }) %>
                                </div>
                            </div>
                            <% } else { %>
                                <p>No top-selling products found.</p>
                                <% } %>




                                    <% if (topSellingCategories.length> 0) { %>
                                        <div class="card"
                                            style="border: 1px solid #ddd; border-radius: 8px; padding: 15px; background: #fff; box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1); max-width: 100%; margin-top: 20px;">
                                            <div class="card-header"
                                                style="display: flex; justify-content: space-between; align-items: center; font-size: 18px; font-weight: bold; margin-bottom: 10px;">
                                                <span class="card-title">Top Selling Categories</span>
                                                <svg class="icon" viewBox="0 0 24 24" fill="none" stroke="currentColor"
                                                    stroke-width="2" style="width: 24px; height: 24px;">
                                                    <path d="M23 6L13.5 15.5L8.5 10.5L1 18"></path>
                                                    <path d="M17 6H23V12"></path>
                                                </svg>
                                            </div>
                                            <div class="card-content"
                                                style="display: flex; flex-direction: column; gap: 8px;">
                                                <% topSellingCategories.forEach((item)=> { %>
                                                    <div class="category-detail"
                                                        style="font-size: 16px; padding: 5px 0;">
                                                        <strong>Category:</strong>
                                                        <%= item.categoryName %> |
                                                            <strong>Sold:</strong>
                                                            <%= item.totalSales %> units |
                                                                <strong>Revenue:</strong>
                                                                <%= item.totalRevenue %>
                                                    </div>
                                                    <% }) %>
                                            </div>
                                        </div>
                                        <% } else { %>
                                            <p>No top-selling categories found.</p>
                                            <% } %>


                                            <% if (topSellingBrands.length > 0) { %>
                                                <div class="card"
                                                    style="border: 1px solid #ddd; border-radius: 8px; padding: 15px; background: #fff; box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1); max-width: 100%; margin-top: 20px;">
                                                    <div class="card-header"
                                                        style="display: flex; justify-content: space-between; align-items: center; font-size: 18px; font-weight: bold; margin-bottom: 10px;">
                                                        <span class="card-title">Top Selling Brands</span>
                                                        <svg class="icon" viewBox="0 0 24 24" fill="none" stroke="currentColor"
                                                            stroke-width="2" style="width: 24px; height: 24px;">
                                                            <path d="M23 6L13.5 15.5L8.5 10.5L1 18"></path>
                                                            <path d="M17 6H23V12"></path>
                                                        </svg>
                                                    </div>
                                                    <div class="card-content"
                                                        style="display: flex; flex-direction: column; gap: 8px;">
                                                        <% topSellingBrands.forEach((item) => { %>
                                                            <div class="brand-detail"
                                                                style="font-size: 16px; padding: 5px 0;">
                                                                <strong>Brand:</strong> <%= item.brand %> |
                                                                <strong>Sold:</strong> <%= item.totalSales %> units |
                                                                <strong>Revenue:</strong> ₹<%= item.totalRevenue %>
                                                            </div>
                                                        <% }) %>
                                                    </div>
                                                </div>
                                            <% } else { %>
                                                <p>No top-selling brands found.</p>
                                            <% } %>
                                            


                                                <div class="card">
                                                    <div class="card-header">
                                                        <span class="card-title">Total Customers</span>
                                                        <svg class="icon" viewBox="0 0 24 24" fill="none"
                                                            stroke="currentColor" stroke-width="2">
                                                            <path d="M17 21v-2a4 4 0 0 0-4-4H5a4 4 0 0 0-4 4v2"></path>
                                                            <circle cx="9" cy="7" r="4"></circle>
                                                            <path d="M23 21v-2a4 4 0 0 0-3-3.87"></path>
                                                            <path d="M16 3.13a4 4 0 0 1 0 7.75"></path>
                                                        </svg>
                                                    </div>
                                                    <div class="card-content">
                                                        <div class="value">
                                                            <%=totalUsers%>
                                                        </div>
                                                        <div class="change">+15% from last period</div>
                                                    </div>
                                                </div>
                    </div>

                    <div class="charts-grid">
                        <div class="card">
                            <div class="card-header">
                                <span class="card-title">Sales Trend</span>
                            </div>
                            <div class="chart-container">
                                <canvas id="salesChart"></canvas>
                            </div>
                        </div>

                        <div class="card">
                            <div class="card-header">
                                <span class="card-title">Orders & Customers</span>
                            </div>
                            <div class="chart-container">
                                <canvas id="ordersChart"></canvas>
                            </div>
                        </div>
                    </div>

                    <div class="table-card">
                        <div class="card-header">
                            <span class="card-title">Detailed Sales</span>
                        </div>

                        <table class="sales-table">
                            <thead>
                                <tr>
                                    <th class="text-right">Period</th>
                                    <th class="text-right">Sales</th>
                                    <th class="text-right">Orders</th>
                                    <th class="text-right">Customers</th>
                                    <th class="text-right">Avg. Order Value</th>
                                    <th>Products</th>
                                </tr>
                            </thead>

                            <tbody id="salesTableBody">

                            </tbody>
                   
                        </table>

                        <div class="pagination-container text-center">
                            <span class="me-2" style="color: white;">Page <%= page %> of <%= totalPages %></span>
                            <nav aria-label="Page navigation">
                                <ul class="pagination pagination-sm justify-content-center">
                                    <% if (page > 1) { %>
                                        <li class="page-item">
                                            <a class="page-link" href="/admin/sales?period=<%= periodForPage %>&page=<%= page - 1 %>&limit=<%= limit %>">&laquo; Prev</a>
                                        </li>
                                    <% } %>
                        
                                    <% for (let i = 1; i <= totalPages; i++) { %>
                                        <li class="page-item <%= i === page ? 'active' : '' %>">
                                            <a class="page-link" href="/admin/sales?period=<%= periodForPage %>&page=<%= i %>&limit=<%= limit %>"><%= i %></a>
                                        </li>
                                    <% } %>
                        
                                    <% if (page < totalPages) { %>
                                        <li class="page-item">
                                            <a class="page-link" href="/admin/sales?period=<%= periodForPage %>&page=<%= page + 1 %>&limit=<%= limit %>">Next &raquo;</a>
                                        </li>
                                    <% } %>
                                </ul>
                            </nav>
                        </div>
                        
                    </div>
    </div>
    <div id="salesData" data-sales="<%= salesData %>" style="display:none;"></div>


    <script src="https://cdnjs.cloudflare.com/ajax/libs/jspdf/2.5.1/jspdf.umd.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/xlsx/0.17.0/xlsx.full.min.js"></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/jspdf/2.5.1/jspdf.umd.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jspdf-autotable/3.5.24/jspdf.plugin.autotable.min.js"></script>


    <script>




        const salesDataString = document.getElementById('salesData').getAttribute('data-sales');
        const sortedData = JSON.parse(salesDataString); 


const sampleData = sortedData.sort((a, b) => periodLabel(b).localeCompare(periodLabel(a)));



        const periods = sampleData.map(item => periodLabel(item));
        const sales = sampleData.map(item => item.sales);
        const orders = sampleData.map(item => item.orders);
        const customers = sampleData.map(item => item.customers);


        const salesCtx = document.getElementById('salesChart').getContext('2d');
        new Chart(salesCtx, {
            type: 'line',
            data: {
                labels: periods,
                datasets: [{
                    label: 'Sales (₹)',
                    data: sales,
                    borderColor: '#8884d8',
                    tension: 0.1
                }]
            },
            options: {
                responsive: true,
                maintainAspectRatio: false
            }
        });


        const ordersCtx = document.getElementById('ordersChart').getContext('2d');
        new Chart(ordersCtx, {
            type: 'bar',
            data: {
                labels: periods,
                datasets: [
                    {
                        label: 'Orders',
                        data: orders,
                        backgroundColor: '#8884d8'
                    },
                    {
                        label: 'Customers',
                        data: customers,
                        backgroundColor: '#82ca9d'
                    }
                ]
            },
            options: {
                responsive: true,
                maintainAspectRatio: false
            }
        });


        const tableBody = document.getElementById('salesTableBody');
        sampleData.forEach((item, index) => {
            const row = document.createElement('tr');
            row.innerHTML = `
    <td class="text-right">${periodLabel(item)}</td>
    <td class="text-right">₹${item.sales.toLocaleString()}</td>
    <td class="text-right">${item.orders}</td>
    <td class="text-right">${item.customers}</td>
    <td class="text-right">₹${(item.sales / item.orders).toFixed()}</td>
    <td>
        <table>
            <thead>
                <tr>
                      <td colspan="5"></td>
                    <th>Product Name</th>
                    <th>Color</th>
                    <th>Size</th>
                    <th>Price</th>
                    <th>Quantity Sold</th>
                    <th>Total</th>
                    <th>Status</th>
                    <th>Peyment Status</th>
                </tr>
            </thead>
            <tbody>
                ${item.products.map(product => `
                <tr>
                      <td colspan="5"></td>
                    <td><strong>${product.name}</strong></td>
                    <td>${product.color || "N/A"}</td>
                    <td>${product.size || "N/A"}</td>
                         <td>₹${product.price/product.quantitySold}</td>
                    <td>${product.quantitySold}</td>
                    <td>₹${product.price}</td>
                    <td>${product.productStatus}</td>
                    <td>${product.productPeyment}</td>
                </tr>
                `).join('')}
            </tbody>
        </table>
    </td>
`;
            tableBody.appendChild(row);
        });


        function periodLabel(item) {
    if (item.period.hasOwnProperty('day')) {
        const { year, month, day } = item.period;
        return `${year}-${String(month).padStart(2, '0')}-${String(day).padStart(2, '0')}`;
    } else if (item.period.hasOwnProperty('week')) {
        const { year, week } = item.period;
        return `${year}-W${String(week).padStart(2, '0')}`;
    } else if (item.period.hasOwnProperty('month')) {
        const { year, month } = item.period;
        return `${year}-${String(month).padStart(2, '0')}`;
    } else if (item.period.hasOwnProperty('year')) {
        const { year } = item.period;
        return `${year}`;
    }
    return '';
}


function sortByPeriod(data) {
    return data.sort((a, b) => periodLabel(b).localeCompare(periodLabel(a)));
}


        function downloadPDF() {
    const { jsPDF } = window.jspdf;
    const doc = new jsPDF({ orientation: "landscape", format: "a3" }); 




 
doc.setFontSize(30);  
doc.setTextColor(0, 128, 0);  
const pageWidth = doc.internal.pageSize.getWidth();
const textWidth = doc.getTextWidth("ZAY");
const centerX = (pageWidth - textWidth) / 2; 

doc.text("ZAY", centerX, 15);


    
    doc.setFontSize(16);
    doc.setTextColor(44, 62, 80);
    doc.text("Sales Report", 14, 15);


    doc.setFontSize(10);
    doc.setTextColor(127, 140, 141);
    doc.text(`Generated on: ${new Date().toLocaleDateString()}`, 14, 22);

    let startY = 30;


    const tableHead = [
        ["Period", "Sales ", "Orders", "Customers", "Avg. Order Value ", 
         "Product Name",  "Color", "Size","Price ", "Qty",'Total','status', 'Peyment Status']
    ];

    const tableBody = [];

    sampleData.forEach((data) => {
        data.products.forEach((product, index) => {
            tableBody.push([
                index === 0 ? periodLabel(data) : "", 
                index === 0 ? `${data.sales.toLocaleString()}` : "", 
                index === 0 ? data.orders : "", 
                index === 0 ? (data.customers || 0) : "", 
                index === 0 ? `${(data.sales / data.orders).toFixed(2)}` : "", 
                product.name,    
                product.color,
                product.size,  
             `${(product.price/product.quantitySold).toLocaleString()}`,
                product.quantitySold,
                   `${(product.price).toLocaleString()}`,
                   product.productStatus,
                   product.productPeyment,
            ]);
        });

       
        if (data.products.length === 0) {
            tableBody.push([
            periodLabel(data),
                `${data.sales.toLocaleString()}`,
                data.orders,
                data.customers || 0,
                `${(data.sales / data.orders).toFixed(2)}`,
                "-", "-", "-", "-", "-"
            ]);
        }
    });

   
    doc.autoTable({
        startY: 50,
        head: tableHead,
        body: tableBody,
        styles: { fontSize: 15, cellPadding: 5 },
        headStyles: { fillColor: [41, 128, 185], textColor: 255, fontSize: 15, fontStyle: "bold" },
        columnStyles: {
    0: { cellWidth: 25 },  
    1: { cellWidth: 30, halign: "right" }, 
    2: { cellWidth: 20, halign: "center" }, 
    3: { cellWidth: 30, halign: "center" }, 
    4: { cellWidth: 35, halign: "right" }, 
    5: { cellWidth: 40 }, 
    6: { cellWidth: 30, halign: "right" }, 
    7: { cellWidth: 20, halign: "center" }, 
    8: { cellWidth: 25, halign: "center" }, 
    9: { cellWidth: 20, halign: "center" } 
}
,
        theme: "grid"
    });


    doc.save("ZAY_sales_report.pdf");
}




function downloadExcel() {
    const wb = XLSX.utils.book_new();
    
    const wsData = [
        ["S.No", "Date", "Sales", "Orders", "Customers", "Avg Sales/Order", "Product Name","Color", "Size","Price ", "Qty","Total",'Status','Peyment Status']
    ];

    let rowIndex = 1;

    sampleData.forEach((item, index) => {
        item.products.forEach((product, productIndex) => {
            wsData.push([
                productIndex === 0 ? index + 1 : "", 
                productIndex === 0 ? periodLabel(item) : "", 
                productIndex === 0 ? item.sales : "", 
                productIndex === 0 ? item.orders : "", 
                productIndex === 0 ? item.customers || 0 : "", 
                productIndex === 0 ? (item.sales / item.orders).toFixed(2) : "", 
                product.name,
                product.color || "N/A",
                product.size || "N/A",
                product.price/product.quantitySold,
                product.quantitySold,
                product.price,
                product.productStatus,
                product.productPeyment,
            ]);
        });
    });

    const ws = XLSX.utils.aoa_to_sheet(wsData);
    
 
    const colWidths = wsData[0].map((_, colIndex) => ({
        wch: Math.max(
            ...wsData.map(row => (row[colIndex] ? row[colIndex].toString().length : 10))
        ) + 2
    }));

    ws["!cols"] = colWidths;

    XLSX.utils.book_append_sheet(wb, ws, "Sales Report");
    XLSX.writeFile(wb, "ZAY_sales_report.xlsx");
}


        document.getElementById('period').addEventListener('change', function () {
            const selectedPeriod = this.value;
            window.location.href = `/admin/sales?period=${selectedPeriod}`;
        });




        function toggleDateFields() {
            const period = document.getElementById("period").value;
            const customDateRange = document.getElementById("custom-date-range");
            customDateRange.style.display = period === "custom" ? "block" : "none";
        }


        toggleDateFields();






        document.getElementById("reportForm").addEventListener("submit", (event) => {
            event.preventDefault();

            const startDateInput = document.getElementById("startDate");
            const endDateInput = document.getElementById("endDate");
            const startDateError = document.getElementById("startDateError");
            const endDateError = document.getElementById("endDateError");

            const startDate = new Date(startDateInput.value);
            const endDate = new Date(endDateInput.value);
            const today = new Date();


            if (!startDateInput.value) {
                startDateError.textContent = " Please select a start date.";
                startDateError.style.color = "red";
                return;
            } else {
                startDateError.textContent = "";
            }

            if (!endDateInput.value) {
                endDateError.textContent = " Please select an end date.";
                endDateError.style.color = "red";
                return;
            } else {
                endDateError.textContent = "";
            }


            if (startDate > today) {
                startDateError.textContent = " Start date cannot be in the future.";
                startDateError.style.color = "red";
                return;
            } else {
                startDateError.textContent = "";
            }


            if (endDate < startDate) {
                endDateError.textContent = " End date cannot be before the start date.";
                endDateError.style.color = "red";
                return;
            } else {
                endDateError.textContent = "";
            }

            let url = `/admin/sales?startDate=${startDateInput.value}&endDate=${endDateInput.value}`;
            console.log("Fetching data from:", url);

            fetch(url)
                .then(response => response.json())
                .then(data => console.log("Report Data:", data))
                .catch(error => console.error("Error fetching data:", error));
        });


        console.log('Script started loading');





        function toggleNav() {
    var sidenav = document.getElementById("mySidenav");
    if (sidenav.style.display === "block") {
        sidenav.style.display = "none";
    } else {
        sidenav.style.display = "block";
    }
}


document.addEventListener('DOMContentLoaded', function() {
    var btn = document.getElementById('toggleNav');
    if (btn) {
        btn.addEventListener('click', toggleNav);
    }
});



const today = new Date().toISOString().split('T')[0];
  

  document.getElementById("endDate").min = today;
     
    </script>

</body>

</html>