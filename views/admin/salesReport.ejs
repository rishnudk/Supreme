<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Sales Report Dashboard | Admin Panel</title>
    <!-- Bootstrap 5 CSS -->
  




    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css" rel="stylesheet">
    <!-- Bootstrap Icons -->
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.0/font/bootstrap-icons.css">
    <!-- DateRangePicker CSS -->
    <link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/daterangepicker/daterangepicker.css">
    <!-- Custom CSS -->

    


        <style>
    :root {
        --primary-color: #4361ee;
        --secondary-color: #3f37c9;
        --success-color: #4cc9f0;
        --info-color: #4895ef;
        --warning-color: #f72585;
        --danger-color: #e63946;
        --light-color: #f8f9fa;
        --dark-color: #212529;
    }
    
    body {
        font-family: 'Inter', sans-serif;
        background-color: #f6f9fc;
        color: #333;
    }
    
    .sidebar {
        background-color: #fff;
        box-shadow: 0 0 15px rgba(0, 0, 0, 0.05);
        height: 100vh;
        position: fixed;
        width: 250px;
        z-index: 100;
    }
    
    .main-content {
        margin-left: 250px;
        padding: 20px;
    }
    
    .card {
        border: none;
        border-radius: 15px;
        box-shadow: 0 5px 15px rgba(0, 0, 0, 0.05);
        transition: transform 0.3s, box-shadow 0.3s;
        margin-bottom: 20px;
    }
    
    .card:hover {
        transform: translateY(-5px);
        box-shadow: 0 8px 20px rgba(0, 0, 0, 0.1);
    }
    
    .card-header {
        background-color: transparent;
        border-bottom: 1px solid rgba(0, 0, 0, 0.05);
        padding: 15px 20px;
    }
    
    .stat-card {
        border-left: 5px solid var(--primary-color);
        padding: 20px;
    }
    
    .stat-card.sales {
        border-left-color: var(--success-color);
    }
    
    .stat-card.orders {
        border-left-color: var(--info-color);
    }
    
    .stat-card.discount {
        border-left-color: var(--warning-color);
    }
    
    .stat-card.products {
        border-left-color: #7209b7; /* New color for products */
    }
    
    .stat-card.categories {
        border-left-color: #f48c06; /* New color for categories */
    }
    
    .stat-card.brands {
        border-left-color: #06d6a0; /* New color for brands */
    }
    
    .stat-icon {
        background-color: rgba(67, 97, 238, 0.1);
        border-radius: 10px;
        color: var(--primary-color);
        display: flex;
        align-items: center;
        justify-content: center;
        font-size: 1.8rem;
        height: 50px;
        width: 50px;
    }
    
    .stat-icon.sales {
        background-color: rgba(76, 201, 240, 0.1);
        color: var(--success-color);
    }
    
    .stat-icon.orders {
        background-color: rgba(72, 149, 239, 0.1);
        color: var(--info-color);
    }
    
    .stat-icon.discount {
        background-color: rgba(247, 37, 133, 0.1);
        color: var(--warning-color);
    }
    
    .stat-icon.products {
        background-color: rgba(114, 9, 183, 0.1); /* Matching products color */
        color: #7209b7;
    }
    
    .stat-icon.categories {
        background-color: rgba(244, 140, 6, 0.1); /* Matching categories color */
        color: #f48c06;
    }
    
    .stat-icon.brands {
        background-color: rgba(6, 214, 160, 0.1); /* Matching brands color */
        color: #06d6a0;
    }
    
    .stat-title {
        color: #6c757d;
        font-size: 0.9rem;
        font-weight: 500;
        text-transform: uppercase;
    }
    
    .stat-value {
        color: #333;
        font-size: 1.5rem;
        font-weight: 700;
        margin-bottom: 5px;
    }
    
    .stat-percentage {
        font-size: 0.8rem;
    }
    
    .stat-percentage.positive {
        color: #10b981;
    }
    
    .stat-percentage.negative {
        color: #ef4444;
    }
    
    .btn-custom {
        background-color: var(--primary-color);
        border: none;
        border-radius: 8px;
        color: white;
        padding: 8px 15px;
        transition: all 0.3s;
    }
    
    .btn-custom:hover {
        background-color: var(--secondary-color);
        color: white;
    }
    
    .btn-custom.btn-outline {
        background-color: transparent;
        border: 1px solid var(--primary-color);
        color: var(--primary-color);
    }
    
    .btn-custom.btn-outline:hover {
        background-color: var(--primary-color);
        color: white;
    }
    
    .table {
        border-radius: 10px;
        overflow: hidden;
    }
    
    .table th {
        background-color: #f8f9fa;
        border-top: none;
        font-weight: 600;
        padding: 12px;
    }
    
    .table td {
        padding: 12px;
        vertical-align: middle;
    }
    
    .nav-link {
        color: #6c757d;
        font-weight: 500;
        padding: 12px 20px;
        transition: all 0.3s;
    }
    
    .nav-link:hover, .nav-link.active {
        background-color: rgba(67, 97, 238, 0.1);
        color: var(--primary-color);
    }
    
    .nav-link i {
        margin-right: 10px;
    }
    
    .dropdown-menu {
        border: none;
        border-radius: 10px;
        box-shadow: 0 5px 15px rgba(0, 0, 0, 0.1);
    }
</style>


</head>
<body>



    <%- include('../partials/adminSidebar') %>


    <!-- Sidebar -->


    

    <!-- Main Content -->
    <div class="main-content">
        <!-- Header -->
        <div class="d-flex justify-content-between align-items-center mb-4">
            <div>
                <h4 class="mb-1">Sales Report</h4>
                <nav aria-label="breadcrumb">
                    <ol class="breadcrumb">
                        <li class="breadcrumb-item"><a href="#" class="text-decoration-none">Dashboard</a></li>
                        <li class="breadcrumb-item active" aria-current="page">Sales Report</li>
                    </ol>
                </nav>
            </div>
            
            <div class="d-flex">
                <div class="dropdown me-2">
                    <button class="btn btn-custom btn-outline dropdown-toggle" type="button" id="downloadReport" data-bs-toggle="dropdown" aria-expanded="false">
                        <i class="bi bi-download"></i> Download
                    </button>
                    <ul class="dropdown-menu" aria-labelledby="downloadReport">
                        <li><a class="dropdown-item" href="#" id="downloadPdf"><i class="bi bi-file-earmark-pdf"></i> PDF</a></li>
                        <li><a class="dropdown-item" href="#" id="downloadExcel"><i class="bi bi-file-earmark-excel"></i> Excel</a></li>
                    </ul>
                </div>
                
                <button class="btn btn-custom">
                    <i class="bi bi-sliders"></i> Advanced Filters
                </button>
            </div>
        </div>
        
        <!-- Filters -->



        <div class="container mt-4">
            <div class="card mb-4">
                <div class="card-body">
                    <div class="row g-3">
                        <div class="col-md-6">
                            <label class="form-label">Date Range</label>
                            <div class="input-group">
                                <span class="input-group-text"><i class="bi bi-calendar"></i></span>
                                <input type="text" class="form-control" id="dateRangePicker" 
                                       value="<%= startDate && endDate ? `${startDate} - ${endDate}` : '' %>">
                            </div>
                        </div>
                        <div class="col-md-3">
                            <label class="form-label">Quick Select</label>
                            <select class="form-select" id="quickDateSelect">
                                <option value="custom" <%= quickSelect === 'custom' ? 'selected' : '' %>>Custom Range</option>
                                <option value="today" <%= quickSelect === 'today' ? 'selected' : '' %>>Today</option>
                                <option value="last7days" <%= quickSelect === 'last7days' ? 'selected' : '' %>>Last 7 Days</option>
                                <option value="last30days" <%= quickSelect === 'last30days' ? 'selected' : '' %>>Last 30 Days</option>
                                <option value="year" <%= quickSelect === 'year' ? 'selected' : '' %>>Year</option>
                            </select>
                        </div>
                    </div>
                </div>
            </div>
        
            <!-- Best Selling Sections in One Row -->
            <div class="row g-3 mb-4">
                <div class="col-md-4">
                    <div class="card">
                        <div class="card-body stat-card products">
                            <div class="d-flex justify-content-between align-items-center">
                                <div>
                                    <p class="stat-title">Best Selling Products (Top 10)</p>
                                    <h3 class="stat-value"><%= report.topProducts ? report.topProducts.length : 0 %> Products</h3>
                                </div>
                                <div class="stat-icon products">
                                    <i class="bi bi-box-seam"></i>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
        
                <div class="col-md-4">
                    <div class="card">
                        <div class="card-body stat-card categories">
                            <div class="d-flex justify-content-between align-items-center">
                                <div>
                                    <p class="stat-title">Best Selling Categories (Top 10)</p>
                                    <h3 class="stat-value"><%= report.topCategories ? report.topCategories.length : 0 %> Categories</h3>
                                </div>
                                <div class="stat-icon categories">
                                    <i class="bi bi-list-ul"></i>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
        
                <div class="col-md-4">
                    <div class="card">
                        <div class="card-body stat-card brands">
                            <div class="d-flex justify-content-between align-items-center">
                                <div>
                                    <p class="stat-title">Best Selling Brands (Top 10)</p>
                                    <h3 class="stat-value"><%= report.topBrands ? report.topBrands.length : 0 %> Brands</h3>
                                </div>
                                <div class="stat-icon brands">
                                    <i class="bi bi-bookmark-star"></i>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>




 <div class="row g-3 mb-4">
    <div class="col-md-4">
        <div class="card">
            <div class="card-body stat-card sales">
                <div class="d-flex justify-content-between align-items-center">
                    <div>
                        <p class="stat-title">Total Sales</p>
                        <h3 class="stat-value"><%= report.totalAmount ? report.totalAmount.toFixed(2) : '0.00' %></h3>
                        
                    </div>
                    <div class="stat-icon sales">
                        <i class="bi bi-currency-rupee"></i>
                    </div>
                </div>
            </div>
        </div>
    </div>
    
    <div class="col-md-4">
        <div class="card">
            <div class="card-body stat-card orders">
                <div class="d-flex justify-content-between align-items-center">
                    <div>
                        <p class="stat-title">Orders</p>
                        <h3 class="stat-value"><%= report.totalOrders || 0 %></h3>
                       
                    </div>
                    <div class="stat-icon orders">
                        <i class="bi bi-bag"></i>
                    </div>
                </div>
            </div>
        </div>
    </div>
    
    <div class="col-md-4">
        <div class="card">
            <div class="card-body stat-card discount">
                <div class="d-flex justify-content-between align-items-center">
                    <div>
                        <p class="stat-title">Discounts</p>
                        <h3 class="stat-value"><%= report.totalDiscount ? report.totalDiscount.toFixed(2) : '0.00' %></h3>
                       
                    </div>
                    <div class="stat-icon discount">
                        <i class="bi bi-tag"></i>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>










        <!-- Sales Graph -->
        <div class="card mb-4">
            <div class="card-header d-flex justify-content-between align-items-center">
                <h5 class="mb-0">Sales Overview</h5>
                <div class="btn-group" role="group">
                    <button type="button" class="btn btn-sm btn-outline-secondary active" data-graph-period="daily">Daily</button>
                    <button type="button" class="btn btn-sm btn-outline-secondary" data-graph-period="weekly">Weekly</button>
                    <button type="button" class="btn btn-sm btn-outline-secondary" data-graph-period="monthly">Monthly</button>

                </div>
            </div>
            <div class="card-body">
                <canvas id="salesChart" style="width: 100%; height: 350px;"></canvas>
            </div>
        </div>
        
        <!-- Detailed Sales Report -->
        <div class="card">
            <div class="card-header d-flex justify-content-between align-items-center">
                <h5 class="mb-0">Detailed Sales Report</h5>
                <div class="input-group" style="width: 250px;">
                    <input type="text" class="form-control" placeholder="Search...">
                    <button class="btn btn-outline-secondary" type="button">
                        <i class="bi bi-search"></i>
                    </button>
                </div>
            </div>



            <div class="card">
                <div class="card-body">
                    <div class="table-responsive">
                        <table class="table table-hover">
                            <thead>
                                <tr>
                                    <th>Order ID</th>
                                    <th>Date</th>
                                    <th>Customer</th>
                                    <th>Products</th>
                                    <th>Subtotal</th>
                                    <th>Discount</th>
                                    <th>Coupon</th>
                                    <th>Total</th>
                                    <th>Status</th>
                                </tr>
                            </thead>
                            <tbody>
                                <% if (report.orders && report.orders.length > 0) { %>
                                    <% report.orders.forEach(order => { %>
                                        <tr>
                                            <td>#ORD-<%= order.orderId || 'N/A' %></td>
                                            <td><%= new Date(order.date).toLocaleDateString('en-US', { month: 'short', day: 'numeric', year: 'numeric' }) %></td>
                                            <td><%= order.user?.name || 'Unknown' %></td>
                                            <td><%= order.products?.length || 0 %> item<%= order.products?.length !== 1 ? 's' : '' %></td>
                                            <td><%= order.originalAmount ? order.originalAmount.toFixed(2) : '0.00' %></td>
                                            <td><%= order.offerDiscount ? order.offerDiscount.toFixed(2) : '0.00' %></td>
                                            <td><%= order.couponCode %> <%= order.couponDiscount ? `(-${order.couponDiscount.toFixed(2)})` : '' %></td>
                                            <td><%= order.totalAmount ? order.totalAmount.toFixed(2) : '0.00' %></td>
                                            <td>
                                                <span class="badge <%= 
                                                    order.status === 'Delivered' ? 'bg-success' : 
                                                    order.status === 'Shipped' ? 'bg-info' : 
                                                    order.status === 'Processing' ? 'bg-warning' : 
                                                    order.status === 'Cancelled' ? 'bg-danger' : 'bg-secondary' %>">
                                                    <%= order.status %>
                                                </span>
                                            </td>
                                        </tr>
                                    <% }) %>
                                <% } else { %>
                                    <tr>
                                        <td colspan="9" class="text-center">No orders found for the selected period.</td>
                                    </tr>
                                <% } %>
                            </tbody>
                        </table>
                    </div>
    
                    <nav>
                        <ul class="pagination justify-content-center">
                            <% 
                                const totalPages = Math.ceil(totalOrders / limit);
                                const maxPagesToShow = 5; // Adjust as needed
                                let startPage = Math.max(1, currentPage - Math.floor(maxPagesToShow / 2));
                                let endPage = Math.min(totalPages, startPage + maxPagesToShow - 1);
                                if (endPage - startPage + 1 < maxPagesToShow) {
                                    startPage = Math.max(1, endPage - maxPagesToShow + 1);
                                }
                            %>
                            <% for (let i = startPage; i <= endPage; i++) { %>
                                <li class="page-item <%= currentPage === i ? 'active' : '' %>">
                                    <a class="page-link" href="/admin/salesReport?quickSelect=<%= quickSelect %>&startDate=<%= startDate %>&endDate=<%= endDate %>&page=<%= i %>&limit=<%= limit %>"><%= i %></a>
                                </li>
                            <% } %>
                        </ul>
                    </nav>



                </div>
            </div>
        </div>
       
       
        </div>
        
       



    </div>



      <!-- Scripts -->
    <!-- Bootstrap 5 JS -->
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/js/bootstrap.bundle.min.js"></script>
    <!-- jQuery (required for DateRangePicker) -->
    <script src="https://cdn.jsdelivr.net/npm/jquery@3.6.0/dist/jquery.min.js"></script>
    <!-- Moment.js (required for DateRangePicker) -->
    <script src="https://cdn.jsdelivr.net/npm/moment@2.29.1/moment.min.js"></script>
    <!-- DateRangePicker JS -->
    <script src="https://cdn.jsdelivr.net/npm/daterangepicker/daterangepicker.min.js"></script>
    <!-- Chart.js -->
    <script src="https://cdn.jsdelivr.net/npm/chart.js@3.7.0/dist/chart.min.js"></script>
    <!-- jsPDF for PDF export -->
    <script src="https://cdn.jsdelivr.net/npm/jspdf@2.5.1/dist/jspdf.umd.min.js"></script>
    <!-- SheetJS for Excel export -->
    <script src="https://cdn.jsdelivr.net/npm/xlsx@0.18.5/dist/xlsx.full.min.js"></script>


    




    <script>
        $(function() {
            $('#dateRangePicker').daterangepicker({
                opens: 'left',
                startDate: moment('<%= startDate %>'),
                endDate: moment('<%= endDate %>'),
                ranges: {
                    'Today': [moment(), moment()],
                    'Yesterday': [moment().subtract(1, 'days'), moment().subtract(1, 'days')],
                    'Last 7 Days': [moment().subtract(6, 'days'), moment()],
                    'Last 30 Days': [moment().subtract(29, 'days'), moment()],
                    'This Month': [moment().startOf('month'), moment().endOf('month')],
                    'Last Month': [moment().subtract(1, 'month').startOf('month'), moment().subtract(1, 'month').endOf('month')]
                }
            });
        });
    
        const ctx = document.getElementById('salesChart').getContext('2d');
        let currentChart;
    
        const chartOptions = {
            responsive: true,
            maintainAspectRatio: false,
            scales: {
                y: {
                    beginAtZero: true,
                    grid: { display: true, color: 'rgba(0, 0, 0, 0.05)' },
                    ticks: { callback: value => '$' + value.toLocaleString() }
                },
                x: { grid: { display: false } }
            },
            plugins: {
                legend: { position: 'top', labels: { boxWidth: 15, padding: 15 } },
                tooltip: { callbacks: { label: ctx => `${ctx.dataset.label}: $${ctx.parsed.y.toLocaleString()}` } }
            },
            interaction: { intersect: false, mode: 'index' }
        };
    
        async function fetchAndUpdateData(start, end, period = 'daily') {
            const url = `/admin/salesReport?startDate=${start.format('YYYY-MM-DD')}&endDate=${end.format('YYYY-MM-DD')}&format=json`;
            try {
                const response = await fetch(url);
                if (!response.ok) throw new Error('Network response was not ok');
                const data = await response.json();
                const chartData = processChartData(data.report.orders, start, end, period);
                updateChart(chartData);
                updateSummary(data.report);
                document.querySelector('.breadcrumb-item.active').textContent = 
                    `Sales Report: ${start.format('MMM D, YYYY')} - ${end.format('MMM D, YYYY')}`;
                // Sync URL for server-side consistency (like old script)
                window.history.pushState({}, '', url.replace('&format=json', ''));
            } catch (error) {
                console.error('Fetch Error:', error);
            }
        }
    
        function processChartData(orders, start, end, period) {
            const labels = generateLabels(start, end, period);
            const salesData = new Array(labels.length).fill(0);
            const discountData = new Array(labels.length).fill(0);
    
            orders.forEach(order => {
                const date = moment(order.date);
                const index = period === 'daily' ? date.diff(start, 'days') :
                             period === 'weekly' ? Math.floor(date.diff(start, 'weeks')) :
                             date.diff(start, 'months');
                if (index >= 0 && index < labels.length) {
                    salesData[index] += order.totalAmount || 0;
                    discountData[index] += (order.offerDiscount || 0) + (order.couponDiscount || 0);
                }
            });
    
            return {
                labels,
                datasets: [
                    { label: 'Sales ($)', data: salesData, borderColor: '#4cc9f0', backgroundColor: 'rgba(76, 201, 240, 0.1)', borderWidth: 2, tension: 0.3, fill: true },
                    { label: 'Discounts ($)', data: discountData, borderColor: '#f72585', backgroundColor: 'rgba(247, 37, 133, 0.1)', borderWidth: 2, tension: 0.3, fill: true }
                ]
            };
        }
    
        function generateLabels(start, end, period) {
            const labels = [];
            let current = moment(start);
            while (current.isSameOrBefore(end)) {
                labels.push(period === 'daily' ? current.format('MMM D') :
                           period === 'weekly' ? `Week ${current.week()}` :
                           current.format('MMM YYYY'));
                current.add(1, period === 'daily' ? 'day' : period === 'weekly' ? 'week' : 'month');
            }
            return labels;
        }
    
        function updateChart(data) {
            if (currentChart) currentChart.destroy();
            currentChart = new Chart(ctx, { type: 'line', data, options: chartOptions });
        }
    
        function updateSummary(report) {
            document.getElementById('totalOrders').textContent = report.totalOrders || 0;
            document.getElementById('totalAmount').textContent = `$${(report.totalAmount || 0).toFixed(2)}`;
            document.getElementById('totalDiscount').textContent = `$${(report.totalDiscount || 0).toFixed(2)}`;
            document.getElementById('totalCouponDiscount').textContent = `$${(report.totalCouponDiscount || 0).toFixed(2)}`;
            document.getElementById('totalOfferDiscount').textContent = `$${(report.totalOfferDiscount || 0).toFixed(2)}`;
        }
    
        // Old script logic: Full page reload for quick select
        document.getElementById('quickDateSelect').addEventListener('change', function(e) {
            const quickSelect = e.target.value;
            if (quickSelect !== 'custom') {
                let start, end;
                switch (quickSelect) {
                    case 'today': start = end = moment(); break;
                    case 'last7days': start = moment().subtract(6, 'days'); end = moment(); break;
                    case 'last30days': start = moment().subtract(29, 'days'); end = moment(); break;
                    case 'year': start = moment().startOf('year'); end = moment(); break;
                }
                $('#dateRangePicker').data('daterangepicker').setStartDate(start);
                $('#dateRangePicker').data('daterangepicker').setEndDate(end);
                updateReport(quickSelect, start.format('YYYY-MM-DD'), end.format('YYYY-MM-DD'));
            }
        });
    
        // Old script logic: Full page reload for custom range
        $('#dateRangePicker').on('apply.daterangepicker', function(ev, picker) {
            document.getElementById('quickDateSelect').value = 'custom';
            const start = picker.startDate.format('YYYY-MM-DD');
            const end = picker.endDate.format('YYYY-MM-DD');
            updateReport('custom', start, end);
        });
    
        function updateReport(quickSelect, startDate, endDate) {
            let url = `/admin/salesReport?quickSelect=${quickSelect}`;
            if (quickSelect === 'custom' && startDate && endDate) {
                url += `&startDate=${startDate}&endDate=${endDate}`;
            }
            console.log('Navigating to:', url);
            window.location.href = url; // Triggers full server-side refresh like old script
        }
    
        document.querySelectorAll('[data-graph-period]').forEach(button => {
            button.addEventListener('click', function() {
                const period = this.getAttribute('data-graph-period');
                document.querySelectorAll('[data-graph-period]').forEach(btn => btn.classList.remove('active'));
                this.classList.add('active');
                const picker = $('#dateRangePicker').data('daterangepicker');
                fetchAndUpdateData(picker.startDate, picker.endDate, period); // Only updates graph
            });
        });
    











        
        // document.getElementById('downloadPdf').addEventListener('click', function(e) {
        //     e.preventDefault();
        //     const picker = $('#dateRangePicker').data('daterangepicker');
        //     const start = picker.startDate.format('YYYY-MM-DD');
        //     const end = picker.endDate.format('YYYY-MM-DD');
        //     const quickSelect = document.getElementById('quickDateSelect').value;
        //     let url = `/admin/salesReport?quickSelect=${quickSelect}&download=pdf`;
        //     if (quickSelect === 'custom') {
        //         url += `&startDate=${start}&endDate=${end}`;
        //     }
        //     window.location.href = url;
        // });
    









        // document.getElementById('downloadExcel').addEventListener('click', function(e) {
        //     e.preventDefault();
        //     const picker = $('#dateRangePicker').data('daterangepicker');
        //     const start = picker.startDate.format('YYYY-MM-DD');
        //     const end = picker.endDate.format('YYYY-MM-DD');
        //     const quickSelect = document.getElementById('quickDateSelect').value;
        //     let url = `/admin/salesReport?quickSelect=${quickSelect}&download=excel`;
        //     if (quickSelect === 'custom') {
        //         url += `&startDate=${start}&endDate=${end}`;
        //     }
        //     window.location.href = url;
        // });
    




        document.addEventListener('DOMContentLoaded', function () {
    const pdfButton = document.getElementById('downloadPdf');
    const excelButton = document.getElementById('downloadExcel');

    if (pdfButton) {
        pdfButton.addEventListener('click', function (e) {
            e.preventDefault();
            console.log("PDF download button clicked");
            downloadReport('pdf');
        });
    }

    if (excelButton) {
        excelButton.addEventListener('click', function (e) {
            e.preventDefault();
            console.log("Excel download button clicked");
            downloadReport('excel');
        });
    }
});

function downloadReport(format) {
    const picker = $('#dateRangePicker').data('daterangepicker');

    if (!picker) {
        console.error('Date range picker not initialized properly.');
        alert('Date range picker is not set up correctly.');
        return;
    }

    const start = picker.startDate.format('YYYY-MM-DD');
    const end = picker.endDate.format('YYYY-MM-DD');
    const quickSelect = document.getElementById('quickDateSelect').value;

    console.log("Selected Quick Date Option:", quickSelect);
    console.log("Start Date:", start);
    console.log("End Date:", end);

    let url = `/admin/salesReport?quickSelect=${quickSelect}&download=${format}`;

    if (quickSelect === 'custom') {
        url += `&startDate=${start}&endDate=${end}`;
    }

    console.log("Generated URL:", url);

    window.location.href = url;
}



      
    
        $(document).ready(() => {
            const picker = $('#dateRangePicker').data('daterangepicker');
            fetchAndUpdateData(picker.startDate, picker.endDate); // Initial graph load
        });
    </script>













<script>
    $(function() {
        $('#dateRangePicker').daterangepicker({
            opens: 'left',
            startDate: moment('<%= startDate %>'),
            endDate: moment('<%= endDate %>'),
            ranges: {
                'Today': [moment(), moment()],
                'Yesterday': [moment().subtract(1, 'days'), moment().subtract(1, 'days')],
                'Last 7 Days': [moment().subtract(6, 'days'), moment()],
                'Last 30 Days': [moment().subtract(29, 'days'), moment()],
                'This Month': [moment().startOf('month'), moment().endOf('month')],
                'Last Month': [moment().subtract(1, 'month').startOf('month'), moment().subtract(1, 'month').endOf('month')],
                'This Year': [moment().startOf('year'), moment().endOf('year')]
            }
        });
    });

    const ctx = document.getElementById('salesChart').getContext('2d');
    let currentChart;

    const chartOptions = {
        responsive: true,
        maintainAspectRatio: false,
        scales: {
            y: {
                beginAtZero: true,
                grid: { display: true, color: 'rgba(0, 0, 0, 0.05)' },
                ticks: { callback: value => '$' + value.toLocaleString() }
            },
            x: { grid: { display: false } }
        },
        plugins: {
            legend: { position: 'top', labels: { boxWidth: 15, padding: 15 } },
            tooltip: { callbacks: { label: ctx => `${ctx.dataset.label}: $${ctx.parsed.y.toLocaleString()}` } }
        },
        interaction: { intersect: false, mode: 'index' }
    };

    async function fetchAndUpdateData(start, end, period = 'daily') {
        const url = `/admin/salesReport?startDate=${start.format('YYYY-MM-DD')}&endDate=${end.format('YYYY-MM-DD')}&format=json`;
        try {
            const response = await fetch(url);
            if (!response.ok) throw new Error('Network response was not ok');
            const data = await response.json();
            const chartData = processChartData(data.report, start, end, period);
            updateChart(chartData);
            updateSummary(data.report);
            document.querySelector('.breadcrumb-item.active').textContent = 
                `Sales Report: ${start.format('MMM D, YYYY')} - ${end.format('MMM D, YYYY')}`;
            window.history.pushState({}, '', url.replace('&format=json', ''));
        } catch (error) {
            console.error('Fetch Error:', error);
        }
    }

    function processChartData(report, start, end, period) {
        const labels = generateLabels(start, end, period);
        const salesData = new Array(labels.length).fill(0);
        const discountData = new Array(labels.length).fill(0);

        report.orders.forEach(order => {
            const date = moment(order.date);
            let index;
            switch (period) {
                case 'daily':
                    index = date.diff(start, 'days');
                    break;
                case 'weekly':
                    index = Math.floor(date.diff(start, 'weeks'));
                    break;
                case 'monthly':
                    index = date.diff(start, 'months');
                    break;
            }
            if (index >= 0 && index < labels.length) {
                salesData[index] += order.totalAmount || 0;
                discountData[index] += (order.offerDiscount || 0) + (order.couponDiscount || 0);
            }
        });

        return {
            labels,
            datasets: [
                { 
                    label: 'Sales ($)', 
                    data: salesData, 
                    borderColor: '#4cc9f0', 
                    backgroundColor: 'rgba(76, 201, 240, 0.1)', 
                    borderWidth: 2, 
                    tension: 0.3, 
                    fill: true 
                },
                { 
                    label: 'Discounts ($)', 
                    data: discountData, 
                    borderColor: '#f72585', 
                    backgroundColor: 'rgba(247, 37, 133, 0.1)', 
                    borderWidth: 2, 
                    tension: 0.3, 
                    fill: true 
                }
            ]
        };
    }

    function generateLabels(start, end, period) {
        const labels = [];
        let current = moment(start);
        const diffDays = end.diff(start, 'days');

        // Adjust period based on date range if not explicitly set
        const effectivePeriod = period === 'auto' ? 
            (diffDays <= 7 ? 'daily' : diffDays <= 60 ? 'weekly' : 'monthly') : 
            period;

        while (current.isSameOrBefore(end)) {
            labels.push(
                effectivePeriod === 'daily' ? current.format('MMM D') :
                effectivePeriod === 'weekly' ? `Week ${current.week()}` :
                current.format('MMM YYYY')
            );
            current.add(1, effectivePeriod === 'daily' ? 'day' : 
                          effectivePeriod === 'weekly' ? 'week' : 'month');
        }
        return labels;
    }

    function updateChart(data) {
        if (currentChart) currentChart.destroy();
        currentChart = new Chart(ctx, { type: 'line', data, options: chartOptions });
    }

    function updateSummary(report) {
        document.getElementById('totalOrders').textContent = report.totalOrders || 0;
        document.getElementById('totalAmount').textContent = `$${(report.totalAmount || 0).toFixed(2)}`;
        document.getElementById('totalDiscount').textContent = `$${(report.totalDiscount || 0).toFixed(2)}`;
        document.getElementById('totalCouponDiscount').textContent = `$${(report.totalCouponDiscount || 0).toFixed(2)}`;
        document.getElementById('totalOfferDiscount').textContent = `$${(report.totalOfferDiscount || 0).toFixed(2)}`;
        
        // Update top selling sections
        updateTopSection('topProducts', report.topProducts, 'Products');
        updateTopSection('topCategories', report.topCategories, 'Categories');
        updateTopSection('topBrands', report.topBrands, 'Brands');
    }

    function updateTopSection(elementId, data, type) {
        const element = document.getElementById(elementId);
        if (element) {
            element.textContent = `${data.length} ${type}`;
        }
    }

    // Quick select handler
    document.getElementById('quickDateSelect').addEventListener('change', function(e) {
        const quickSelect = e.target.value;
        if (quickSelect !== 'custom') {
            let start, end;
            switch (quickSelect) {
                case 'today': 
                    start = end = moment(); 
                    break;
                case 'last7days': 
                    start = moment().subtract(6, 'days'); 
                    end = moment(); 
                    break;
                case 'last30days': 
                    start = moment().subtract(29, 'days'); 
                    end = moment(); 
                    break;
                case 'year': 
                    start = moment().startOf('year'); 
                    end = moment(); 
                    break;
            }
            $('#dateRangePicker').data('daterangepicker').setStartDate(start);
            $('#dateRangePicker').data('daterangepicker').setEndDate(end);
            fetchAndUpdateData(start, end, 'auto'); // Use auto period selection
        }
    });

    // Custom date range handler
    $('#dateRangePicker').on('apply.daterangepicker', function(ev, picker) {
        document.getElementById('quickDateSelect').value = 'custom';
        const start = picker.startDate;
        const end = picker.endDate;
        fetchAndUpdateData(start, end, 'auto'); // Use auto period selection
    });

    // Period toggle buttons
    document.querySelectorAll('[data-graph-period]').forEach(button => {
        button.addEventListener('click', function() {
            const period = this.getAttribute('data-graph-period');
            document.querySelectorAll('[data-graph-period]').forEach(btn => btn.classList.remove('active'));
            this.classList.add('active');
            const picker = $('#dateRangePicker').data('daterangepicker');
            fetchAndUpdateData(picker.startDate, picker.endDate, period);
        });
    });

    // Download handlers
    document.addEventListener('DOMContentLoaded', function () {
        const pdfButton = document.getElementById('downloadPdf');
        const excelButton = document.getElementById('downloadExcel');

        if (pdfButton) {
            pdfButton.addEventListener('click', function (e) {
                e.preventDefault();
                downloadReport('pdf');
            });
        }

        if (excelButton) {
            excelButton.addEventListener('click', function (e) {
                e.preventDefault();
                downloadReport('excel');
            });
        }
    });

    function downloadReport(format) {
        const picker = $('#dateRangePicker').data('daterangepicker');
        if (!picker) {
            console.error('Date range picker not initialized.');
            return;
        }
        const start = picker.startDate.format('YYYY-MM-DD');
        const end = picker.endDate.format('YYYY-MM-DD');
        const quickSelect = document.getElementById('quickDateSelect').value;
        let url = `/admin/salesReport?quickSelect=${quickSelect}&download=${format}`;
        if (quickSelect === 'custom') {
            url += `&startDate=${start}&endDate=${end}`;
        }
        window.location.href = url;
    }

    // Initial load
    $(document).ready(() => {
        const picker = $('#dateRangePicker').data('daterangepicker');
        fetchAndUpdateData(picker.startDate, picker.endDate, 'auto');
    });
</script>









</body>
</html>
