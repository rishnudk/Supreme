<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>User Management</title>
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/css/bootstrap.min.css" rel="stylesheet">
  <link rel="stylesheet" href="/css/admin.css">
  <style>
body {
    font-family: 'Roboto', sans-serif;
    background-color: #f8f9fa; /* Light background for the body */
}

.header {
    padding: 1.5rem 2rem; /* Increased padding */
    background-color: #ffffff; /* White header background */
    border-bottom: 1px solid #e5e7eb; /* Subtle border */
    box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1); /* Low shadow for depth */
}

.header h2 {
    margin: 0;
    font-size: 1.5rem;
    font-weight: 600;
    color: #1f2937; /* Dark text color */
}

.header form {
    display: flex;
    gap: 0.75rem;
    align-items: center;
}

.header input[type="text"] {
    padding: 0.5rem 1rem;
    border: 1px solid #d1d5db; /* Light border color */
    border-radius: 0.375rem; /* Rounded corners */
    font-size: 0.875rem;
    width: 300px; /* Fixed width */
    transition: border-color 0.15s ease-in-out;
}

.header input[type="text"]:focus {
    outline: none; /* Remove outline */
    border-color: #3b82f6; /* Border color on focus */
    box-shadow: 0 0 0 3px rgba(59, 130, 246, 0.25); /* Focus shadow */
}

.header button[type="submit"] {
    padding: 0.5rem 1rem;
    border-radius: 0.375rem;
    background-color: #3b82f6; /* Blue background */
    color: white; /* White text color */
    border: 1px solid transparent;
    transition: all 0.15s ease-in-out; /* Smooth transition */
}

.header button[type="submit"]:hover {
    background-color: #2563eb; /* Darker blue on hover */
}

.status-active {
    background-color: #d1fae5; /* Light green background */
    color: #15803d; /* Dark green text */
    font-weight: bold; /* Bold text */
    padding: 0.25rem 0.5rem; /* Padding for status */
    border-radius: 0.375rem; /* Rounded corners for status */
}

.status-inactive {
    background-color: #fee2e2; /* Light red background */
    color: #991b1b; /* Dark red text */
    font-weight: bold;
    padding: 0.25rem 0.5rem; /* Padding for status */
    border-radius: 0.375rem; /* Rounded corners for status */
}

.actions button {
    margin: 0 5px;
    border: 1px solid #d1d5db; /* Light border */
    border-radius: 0.375rem; /* Rounded corners */
    padding: 0.25rem 0.5rem; /* Padding for action buttons */
}

.pagination-container {
    display: flex;
    justify-content: center;
    align-items: center;
    padding: 20px;
    gap: 12px;
}

.pagination-container a {
    text-decoration: none;
    color: #2563eb; /* Blue text for pagination links */
    padding: 8px 12px;
    border: 1px solid #e5e7eb; /* Light border */
    border-radius: 6px; /* Rounded corners */
    transition: all 0.2s ease;
    font-size: 14px; /* Font size */
    min-width: 60px; /* Minimum width */
    text-align: center; /* Centered text */
}

.pagination-container a:hover {
    background-color: #2563eb; /* Hover background color */
    color: white; /* White text on hover */
}

.pagination-text {
    color: #4b5563; /* Dark grey for pagination text */
    font-size: 14px; /* Font size */
}

/* Optional: Disabled state for pagination links */
.pagination-container a.disabled {
    color: #9ca3af; /* Light grey */
    pointer-events: none; /* Disable pointer events */
    border-color: #e5e7eb; /* Light border */
}

.table {
    background-color: white; /* White table background */
    border-radius: 8px; /* Rounded corners */
    overflow: hidden; /* Ensure no overflow */
    box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1); /* Table shadow */
}

.table th, .table td {
    vertical-align: middle; /* Middle alignment */
    padding: 12px; /* Padding for cells */
}
.user{
    display: none;
}
.clear {
    background-color: #f44336; /* Red background */
    color: white;             /* White text */
    border: none;             /* No border */
    border-radius: 4px;      /* Slightly rounded corners */
    padding: 10px 20px;      /* Padding around the text */
    font-size: 16px;         /* Font size */
    cursor: pointer;         /* Change cursor on hover */
    transition: background-color 0.3s; /* Smooth background transition */
}

.clear:hover {
    background-color: #d32f2f; /* Darker red on hover */
}

.clear:active {
    background-color: #b71c1c; /* Even darker red when active */
}
  </style>
</head>
<body>
    <%- include('../partials/adminSidebar') %>
  <div class="container my-5">
    <!-- Header and Search Bar -->

    <div class="header d-flex justify-content-between align-items-center">
      <h2>User Management</h2>
      <form action="/admin/user" method="GET">
        <input type="text" name="search" value="<%= search %>" placeholder="Search by email" />
        <button type="submit">Search</button>
        <button type="button" class="clear" onclick="clearSearch()">Clear</button>
      </form>
    </div>

    <!-- User Table -->
    <table class="table table-hover mt-4">
      <thead>
        <tr>
          <th>Name</th>
          <th>Email</th>
          <th>Status</th>
          <th>Actions</th>
        </tr>
      </thead>
      <tbody id="userTableBody">
        <!-- Users will be dynamically populated here -->
      </tbody>
    </table>

  </div>

  <!-- Edit User Modal -->
  <div class="modal fade" id="editUserModal" tabindex="-1">
    <div class="modal-dialog">
      <div class="modal-content">
        <div class="modal-header">
          <h5 class="modal-title">Edit User</h5>
          <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
        </div>
        <div class="modal-body">
          <form id="editUserForm">
            <div class="mb-3">
              <label for="editName" class="form-label">Name</label>
              <input type="text" class="form-control" id="editName" required>
            </div>
            <div class="mb-3">
              <label for="editEmail" class="form-label">Email</label>
              <input type="email" class="form-control" id="editEmail" required>
            </div>
            <div class="mb-3">
              <label for="editRole" class="form-label">Role</label>
              <select class="form-select" id="editRole" required>
                <option value="Admin">Admin</option>
                <option value="Editor">Editor</option>
                <option value="Viewer">Viewer</option>
              </select>
            </div>
          </form>
        </div>
        <div class="modal-footer">
          <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
          <button type="button" class="btn btn-primary" id="saveChanges">Save Changes</button>
        </div>
      </div>
    </div>
  </div>



<!--   
  <div class="pagination-container">
    <% if (currentPage > 1) { %>
      <a href="/admin/user?page=1&search=<%= search %>">First</a>
      <a href="/admin/user?page=<%= currentPage - 1 %>&search=<%= search %>">Prev</a>
    <% } %>
    <span class="pagination-text">Page <%= currentPage %> of <%= totalPages %></span>
    <% if (currentPage < totalPages) { %>
      <a href="/admin/user?page=<%= currentPage + 1 %>&search=<%= search %>">Next</a>
      <a href="/admin/user?page=<%= totalPages %>&search=<%= search %>">Last</a>
    <% } %>
  </div> -->

 

  <div class="pagination-container">
    <% for (let i = 1; i <= totalPages; i++) { %>
      <a href="/admin/user?page=<%= i %>&search=<%= search %>" 
         class="page-link <%= i === currentPage ? 'active' : '' %>">
        <%= i %>
      </a>
    <% } %>
  </div>
  <div id="user" class="user">
    <%=users%>
      </div>
  <!-- Scripts -->
  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/js/bootstrap.bundle.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>

  <script>
    // Sample Data
    let users = document.getElementById('user').innerHTML;
    users = JSON.parse(users);
    console.log(users);

    let currentPage = 1;
    const usersPerPage = 3;

    // Render Users

    // function renderUsers() {
    //   const tbody = document.getElementById('userTableBody');
    //   tbody.innerHTML = '';
    //   users.forEach(user => {
    //     const row = `
    //       <tr>
    //         <td>${user.name}</td>
    //         <td>${user.email}</td>
    //         <td><span class="${user.status === 'Active' ? 'status-active' : 'status-inactive'}">${user.status}</span>  <div class="toast-body" id="toastMessage"></div></td>
    //         <td class="actions">
    //             <button 
    //       onclick="confirmAction('${user._id}', '${user.status}')"
    //       class="btn btn-sm ${user.status === 'Active' ? 'btn-danger' : 'btn-success'}"
    //     >
    //       ${user.status === 'Active' ? 'Block' : 'Unblock'}
    //     </button>
    //         </td>
    //       </tr>
    //     `;
    //     tbody.innerHTML += row;
    //   });
    // }


    function renderUsers() {
  const tbody = document.getElementById('userTableBody');
  tbody.innerHTML = '';
  console.log("Before Sorting:", JSON.stringify(users, null, 2)); 
  // Sort users by `_id` in descending order (newest first)
  users.sort((a, b) => b._id.localeCompare(a._id)); 
  console.log("After Sorting:", JSON.stringify(users, null, 2));


  users.forEach(user => {
    const row = `
      <tr>
        <td>${user.name}</td>
        <td>${user.email}</td>
        <td><span class="${user.status === 'Active' ? 'status-active' : 'status-inactive'}">
          ${user.status}
        </span>  
        <div class="toast-body" id="toastMessage"></div></td>
        <td class="actions">
          <button 
            onclick="confirmAction('${user._id}', '${user.status}')"
            class="btn btn-sm ${user.status === 'Active' ? 'btn-danger' : 'btn-success'}"
          >
            ${user.status === 'Active' ? 'Block' : 'Unblock'}
          </button>
        </td>
      </tr>
    `;
    tbody.innerHTML += row;
  });
}







    // Open Edit Modal
    function openEditModal(id) {
      const user = users.find(u => u.id === id);
      document.getElementById('editName').value = user.name;
      document.getElementById('editEmail').value = user.email;
      document.getElementById('editRole').value = user.role;
      new bootstrap.Modal(document.getElementById('editUserModal')).show();
    }


    function confirmAction(userId, status) {
        const modalElement = document.getElementById('confirmModal');
  const confirmBtn = document.getElementById('confirmAction');
  const actionTextSpan = document.getElementById('actionText');
  
  const action = status === 'Active' ? 'block' : 'unblock';
  Swal.fire({
        title: `Are you sure you want to ${action} this user?`,
        text: `The user will be ${action}ed and this action can be reverted.`,
        icon: 'warning',
        showCancelButton: true,
        confirmButtonColor: action === 'block' ? '#d33' : '#3085d6',
        cancelButtonColor: '#6c757d',
        confirmButtonText: `Yes, ${action} user!`
    }).then(async (result) => {
        if (result.isConfirmed) {
    try {
     
      const response = await fetch(`/admin/user/status/${userId}`, {
        method: 'PATCH',
        headers: {
          'Content-Type': 'application/json'
        }
      });

      if (!response.ok) {
        throw new Error('Failed to update status');
      }

      const result = await response.json();
      

      const user = users.find(u => u._id === userId);
      if (user) {
        user.status = result.status;
      }
      
      renderUsers();  
  
  showToast('Success', 'User status updated successfully');


      
    } catch (error) {
      console.error('Error:', error);
      showToast('Error', 'Failed to update user status');
    }
  };
}
    )}

function showToast(title, message) {

  const toast = new bootstrap.Toast(document.getElementById('statusToast'));
  document.getElementById('toastTitle').textContent = title;
  document.getElementById('toastMessage').textContent = message;
  toast.show();
}


    renderUsers();
    function clearSearch() {
    window.location.href = '/admin/user'; 
  }
  </script>


</body>
</html>