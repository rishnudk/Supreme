<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Coupon Management</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">

 <style>
    /* Coupon Management Page Styles */
:root {
    --primary: #4339ca;
    --error: #d32f2f;
    --text: #333;
    --sidebar-width-closed: 60px;
    --sidebar-width-open: 240px;
    --shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
    --card-bg: #fff;
    --border-color: #ddd;
    --hover-bg: rgba(67, 57, 202, 0.1);
    --active-color: #2a229c;
    --inactive-color: #888;
    --container-max-width: 1200px;
}

/* Main Content Container - Centered with max-width */
.container {
    margin-left: var(--sidebar-width-closed);
    margin-right: auto;
    padding: 30px 20px 20px 20px; /* Increased top padding for header clearance */
    max-width: var(--container-max-width);
    width: calc(100% - var(--sidebar-width-closed));
    transition: margin-left 0.3s ease-in-out, width 0.3s ease-in-out;
    box-sizing: border-box;
    display: flex;
    flex-direction: column;
    align-items: center;
    min-height: 100vh;
}

/* When sidebar is open, adjust container margins */
#admin-sidebar.show ~ .container {
    margin-left: var(--sidebar-width-open);
    width: calc(100% - var(--sidebar-width-open));
}

/* Header Section - With extra padding to avoid overlap with sidebar toggle */
.header {
    margin-bottom: 25px;
    padding-bottom: 10px;
    padding-left: 10px;
    border-bottom: 1px solid var(--border-color);
    text-align: center;
}

.header h1 {
    font-size: 24px;
    color: var(--text);
    margin: 0;
    padding-top: 15px; /* Increased to prevent overlap with sidebar toggle */
    padding-left: 15px; /* Extra space from the left */
}

/* Search & Add Section */
.search-section {
    display: flex;
    flex-wrap: wrap;
    gap: 12px;
    margin-bottom: 25px;
    align-items: center;
    padding: 0 10px;
    justify-content: center;
}

.search-input {
    flex: 1;
    min-width: 200px;
    padding: 12px 15px;
    border: 1px solid var(--border-color);
    border-radius: 4px;
    font-size: 14px;
}

.reset-btn, .add-category-btn {
    padding: 12px 15px;
    border: none;
    border-radius: 4px;
    font-size: 14px;
    cursor: pointer;
    display: flex;
    align-items: center;
    gap: 5px;
}

.reset-btn {
    background-color: #f5f5f5;
    color: var(--text);
}

.add-category-btn {
    background-color: var(--primary);
    color: white;
}

/* Coupon Table - Slightly narrower with centered content */
.category-table {
    width: 100%;
    max-width: 950px;
    margin: 0 auto 25px auto;
    border-collapse: collapse;
    box-shadow: var(--shadow);
    background-color: var(--card-bg);
    border-radius: 6px;
    overflow: hidden;
}

.category-table th, 
.category-table td {
    padding: 14px 15px;
    text-align: left;
    border-bottom: 1px solid var(--border-color);
}

.category-table th {
    background-color: #f9f9f9;
    font-weight: 600;
}

.category-table tr:hover {
    background-color: var(--hover-bg);
}

/* Status Indicators */
.status {
    padding: 5px 12px;
    border-radius: 20px;
    font-size: 12px;
    font-weight: 500;
    text-transform: capitalize;
    display: inline-block;
}

.status.active {
    background-color: rgba(76, 175, 80, 0.1);
    color: #2e7d32;
}

.status.inactive {
    background-color: rgba(158, 158, 158, 0.1);
    color: #616161;
}

/* Action Buttons */
.action-btn {
    background: none;
    border: none;
    cursor: pointer;
    padding: 7px;
    margin: 0 3px;
    font-size: 16px;
    border-radius: 4px;
    color: var(--text);
}

.action-btn:hover {
    background-color: var(--hover-bg);
    color: var(--primary);
}

.delete-btn:hover {
    background-color: rgba(211, 47, 47, 0.1);
    color: var(--error);
}

/* Pagination - Centered with the table */
.pagination {
    display: flex;
    justify-content: space-between;
    align-items: center;
    flex-wrap: wrap;
    margin: 20px auto 0 auto;
    max-width: 950px;
    padding: 0 10px;
}

.pagination-info {
    color: var(--text);
    font-size: 14px;
}

.pagination-buttons {
    display: flex;
    gap: 10px;
}

.pagination-btn {
    padding: 8px 15px;
    border: 1px solid var(--border-color);
    border-radius: 4px;
    background-color: white;
    cursor: pointer;
    font-size: 14px;
}

.pagination-btn:hover {
    background-color: var(--hover-bg);
    color: var(--primary);
}

/* Modal Styles */
.modal-overlay {
    position: fixed;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background-color: rgba(0, 0, 0, 0.5);
    display: none;
    justify-content: center;
    align-items: center;
    z-index: 2000;
}

.modal { 
    background: white; 
    padding: 30px; 
    margin: 10px auto; 
    width: 500px; 
    position: fixed; /* Changed from relative to fixed for better positioning */
    top: 50%; 
    left: 50%; 
    transform: translate(-50%, -50%); /* Center it */
    z-index: 1001; 
    border-radius: 10px;
    box-shadow: 0 0 20px rgba(0,0,0,0.3);
    display: block; /* Ensure itâ€™s visible when parent is block */
    max-height: 80vh;
    overflow-y: auto;
}

.modal h2 {
    margin-top: 0;
    color: var(--text);
    font-size: 24px;
    padding-bottom: 15px;
    margin-bottom: 20px;
    border-bottom: 1px solid var(--border-color);
    text-align: center;
}

/* Form Styles */
.form-group {
    margin-bottom: 20px;
}

.form-group label {
    display: block;
    margin-bottom: 8px;
    font-weight: 500;
    color: var(--text);
}

.form-group input, 
.form-group select {
    width: 100%;
    padding: 12px;
    border: 1px solid var(--border-color);
    border-radius: 4px;
    font-size: 14px;
}

.form-actions {
    display: flex;
    justify-content: center;
    gap: 15px;
    margin-top: 25px;
}

.cancel-btn, 
.save-btn {
    padding: 12px 25px;
    border: none;
    border-radius: 4px;
    cursor: pointer;
    font-size: 14px;
    min-width: 100px;
}

.cancel-btn {
    background-color: #f5f5f5;
    color: var(--text);
}

.save-btn {
    background-color: var(--primary);
    color: white;
}

/* Responsive Media Queries */
@media (max-width: 992px) {
    .container {
        padding: 30px 15px 15px 15px;
        max-width: 850px;
    }
    
    .category-table {
        max-width: 800px;
    }
    
    .pagination {
        max-width: 800px;
    }
}

@media (max-width: 768px) {
    .container {
        padding-top: 40px; /* Extra space for the header at tablet size */
    }
    
    .search-section {
        flex-direction: column;
        align-items: stretch;
    }
    
    .search-input {
        width: 100%;
    }
    
    .category-table {
        font-size: 14px;
        max-width: 600px;
    }
    
    .pagination {
        flex-direction: column;
        gap: 15px;
        align-items: center;
        max-width: 600px;
    }
}

@media (max-width: 576px) {
    .container {
        margin-left: 0;
        margin-top: 20px;
        width: 100%;
        padding: 40px 10px 15px 10px;
    }
    
    #admin-sidebar.show ~ .container {
        margin-left: 0;
        width: 100%;
    }
    
    .header h1 {
        font-size: 20px;
        margin-top: 10px;
        text-align: center;
        padding-left: 0;
    }
    
    .category-table th:nth-child(1),
    .category-table td:nth-child(1) {
        display: none; /* Hide ID column on mobile */
    }
    
    .category-table {
        max-width: 100%;
    }
    
    .action-btn {
        padding: 8px;
    }
    
    /* Make sure forms in modals are easy to use on mobile */
    .form-actions {
        flex-direction: column;
    }
    
    .form-actions button {
        width: 100%;
    }
}

/* Utility to show modals when they're active */
.modal-overlay.active {
    display: flex;
}

/* Special handling for when the sidebar is toggled */
@media (max-width: 992px) {
    #admin-sidebar.show {
        z-index: 1100;
    }
    
    #admin-sidebar.show ~ .container {
        margin-left: 0;
        width: 100%;
    }
}




.pagination {
    margin-top: 20px;
    text-align: center;
}

.pagination a {
    display: inline-block;
    padding: 8px 12px;
    margin: 0 4px;
    text-decoration: none;
    color: #333;
    border: 1px solid #ddd;
    border-radius: 4px;
}

.pagination a.active {
    background-color: #007bff;
    color: white;
    border-color: #007bff;
}

.pagination a:hover:not(.active) {
    background-color: #f5f5f5;
}






</style>
</head>



<body>
    <%- include('../partials/adminSidebar') %>

    <!-- Main Content -->
    <div class="container">
        <!-- Header -->
        <div class="header">
            <h1>Coupon Management</h1>
        </div>

     

        <!-- Add Coupon Button -->
        <button class="add-category-btn" id="add-coupon-btn"><i class="fas fa-plus"></i> Add Coupon</button>
  

      <!-- Coupon Table -->
      <table class="category-table">
        <thead>
            <tr>
                <th>IDs</th>
                <th>Code</th>
                <th>Discount</th>
                <th>Status</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody id="coupon-table-body">
            <% if (coupons.length > 0) { %>
                <% coupons.forEach(coupon => { %>
                    <tr>
                        <td><%= coupon.index %></td>
                        <td><%= coupon.code %></td>
                        <td><%= coupon.discount %></td>

                        <td><span class="status <%= coupon.status %>"><%= coupon.status.charAt(0).toUpperCase() + coupon.status.slice(1) %></span></td>
                        <td>
                            <button class="action-btn" onclick="openUpdateModal('<%= coupon.id %>')"><i class="fas fa-edit"></i></button>
                            <button class="action-btn delete-btn" onclick="deleteCoupon('<%= coupon.id %>')"><i class="fas fa-trash"></i></button>
                        </td>
                    </tr>
                <% }) %>
            <% } else { %>
                <tr>
                    <td colspan="5">No coupons found</td>
                </tr>
            <% } %>
        </tbody>

        
    </table>


    <% if (pagination && pagination.totalPages > 1) { %>
        <div class="pagination">
            <% for(let i = 1; i <= pagination.totalPages; i++) { %>
                <a href="?page=<%= i %>" 
                   class="<%= pagination.currentPage === i ? 'active' : '' %>">
                    <%= i %>
                </a>
            <% } %>
        </div>
    <% } %>



    </div>


    

<!-- Add Coupon Modal -->
<div class="modal-overlay" id="add-modal">
    <div class="modal">
        <h2>Add Coupon</h2>
        <form id="add-coupon-form">
            <div class="form-group">
                <label for="coupon-code">Coupon Code</label>
                <input type="text" id="coupon-code" name="code" required>
            </div>
           
            <div class="form-group">
                <label for="discount-value">Discount Value</label>
                <input type="number" id="discount-value" name="discountValue" min="1" max="99" required>
            </div>
            <div class="form-group">
                <label for="min-order-value">Minimum Order Value </label>
                <input type="number" id="min-order-value" name="minOrderValue" min="0" value="">
            </div>
          
            <div class="form-group">
                <label for="expiry-date">Expiry Date</label>
                <input type="date" id="expiry-date" name="expiryDate" required>
            </div>
            <div class="form-group">
                <label for="status">Status</label>
                <select id="status" name="isActive" required>
                    <option value="true">Active</option>
                    <option value="false">Inactive</option>
                </select>
            </div>
            <div class="form-actions">
                <button type="button" class="cancel-btn" onclick="closeModal('add-modal')">Cancel</button>
                <button type="submit" class="save-btn">Save</button>
            </div>
        </form>
    </div>
</div>



<!-- Update Coupon Modal -->
<div class="modal-overlay" id="update-modal">
    <div class="modal">
        <h2>Update Coupon</h2>
        <form id="update-coupon-form">
            <input type="hidden" id="update-coupon-id" name="id">
            <div class="form-group">
                <label for="update-coupon-code">Coupon Code</label>
                <input type="text" id="update-coupon-code" name="code" required>
            </div>
            <div class="form-group">
                <label for="update-discount-value">Discount Value</label>
                <input type="number" id="update-discount-value" name="discountValue" min="1" max="99" required>
            </div>
            <div class="form-group">
                <label for="update-min-order-value">Minimum Order Value</label>
                <input type="number" id="update-min-order-value" name="minOrderValue" min="0" value="">
            </div>
        
            <div class="form-group">
                <label for="update-expiry-date">Expiry Date</label>
                <input type="date" id="update-expiry-date" name="expiryDate" required>
            </div>
            <div class="form-group">
                <label for="update-status">Status</label>
                <select id="update-status" name="isActive" required>
                    <option value="true">Active</option>
                    <option value="false">Inactive</option>
                </select>
            </div>
            <div class="form-actions">
                <button type="button" class="cancel-btn" onclick="closeModal('update-modal')">Cancel</button>
                <button type="submit" class="save-btn">Save</button>
            </div>
        </form>
    </div>
</div>



<!-- Coupon table code here -->




    

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/js/all.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>

<script>


function closeModal(modalId) {
        const modal = document.getElementById(modalId);
        if (modal) {
            modal.style.display = 'none'; // Hide the modal
            const form = modal.querySelector('form');
            if (form) {
                form.reset(); // Reset form fields if a form exists
            }
        } else {
            console.error(`Modal with ID '${modalId}' not found`);
        }
    }


function fetchCoupons(page) {
        fetch(`/admin/coupons?page=${page}`)
            .then(response => response.json())
            .then(data => {
                const tableBody = document.getElementById("coupon-table-body");
                tableBody.innerHTML = ""; // Clear existing rows

                if (data.coupons.length === 0) {
                    tableBody.innerHTML = "<tr><td colspan='5'>No coupons found</td></tr>";
                    return;
                }

                data.coupons.forEach((coupon, index) => {
                    tableBody.innerHTML += `
                        <tr>
                            <td>${index + 1}</td>
                            <td>${coupon.code}</td>
                            <td>${coupon.discount}</td>
                            <td><span class="status ${coupon.status}">${coupon.status.charAt(0).toUpperCase() + coupon.status.slice(1)}</span></td>
                            <td>
                                <button class="action-btn" onclick="openUpdateModal('${coupon.id}')"><i class="fas fa-edit"></i></button>
                                <button class="action-btn delete-btn" onclick="deleteCoupon('${coupon.id}')"><i class="fas fa-trash"></i></button>
                            </td>
                        </tr>`;
                });
            })
            .catch(error => console.error("Error fetching coupons:", error));
    }



document.addEventListener("DOMContentLoaded", () => {
    const addCouponBtn = document.getElementById("add-coupon-btn");
    const addCouponForm = document.getElementById("add-coupon-form");
    const updateCouponForm = document.getElementById("update-coupon-form");

    // Debug logging
    function debugLog(message) {
        console.log(`[DEBUG] ${message}`);
    }

    // Open Add Coupon Modal
    if (addCouponBtn) {
        addCouponBtn.addEventListener("click", (e) => {
            e.preventDefault();
            debugLog('Add Coupon button clicked');
            document.getElementById("add-modal").style.display = "block";
        });
        debugLog('Add button listener attached');
    } else {
        debugLog('Add Coupon button not found');
    }

    // Close modal
    function closeModal(modalId) {
        debugLog(`Closing modal: ${modalId}`);
        const modal = document.getElementById(modalId);
        if (modal) modal.style.display = "none";
    }

    // Open Update Coupon Modal
    window.openUpdateModal = function(id) {
        debugLog(`Opening update modal for ID: ${id}`);
        fetch(`/admin/coupons/${id}`)
            .then(response => response.json())
            .then(coupon => {
                if (coupon) {
                    document.getElementById("update-coupon-id").value = id;
                    document.getElementById("update-coupon-code").value = coupon.code;
                    document.getElementById("update-discount-value").value = coupon.discountValue;
                    document.getElementById("update-min-order-value").value = coupon.minOrderValue;
                    // document.getElementById("update-usage-limit").value = coupon.usageLimit;
                    document.getElementById("update-expiry-date").value = coupon.expiryDate.split('T')[0];
                    document.getElementById("update-status").value = coupon.isActive.toString();
                    document.getElementById("update-modal").style.display = "block";
                }
            })
            .catch(error => {
                console.error('Error fetching coupon:', error);
                Swal.fire('Error', 'Failed to load coupon data', 'error');
            });
    };

    // Delete Coupon (unchanged, already working)
    window.deleteCoupon = function(id) {
        debugLog(`Delete requested for ID: ${id}`);
        Swal.fire({
            title: 'Are you sure?',
            text: "You won't be able to revert this!",
            icon: 'warning',
            showCancelButton: true,
            confirmButtonColor: '#3085d6',
            cancelButtonColor: '#d33',
            confirmButtonText: 'Yes, delete it!'
        }).then((result) => {
            if (result.isConfirmed) {
                fetch(`/admin/coupons/delete/${id}`, {
                    method: 'DELETE',
                    headers: { 'Content-Type': 'application/json' }
                })
                .then(response => response.json())
                .then(result => {
                    debugLog('Delete server response:', result);
                    if (result.success) {
                        Swal.fire('Deleted!', result.message, 'success').then(() => location.reload());
                    } else {
                        Swal.fire('Error', result.message, 'error');
                    }
                })
                .catch(error => {
                    console.error('Error deleting coupon:', error);
                    Swal.fire('Error', 'Failed to delete coupon', 'error');
                });
            }
        });
    };

    // Validation function (unchanged)
    function validateForm(formId, isUpdate = false) {
        const form = document.getElementById(formId);
        const prefix = isUpdate ? 'update-' : '';
        const code = document.getElementById(`${prefix}coupon-code`).value.trim();
        const discountValue = document.getElementById(`${prefix}discount-value`).value.trim();
        const minOrderValue = document.getElementById(`${prefix}min-order-value`).value.trim();
        const expiryDate = document.getElementById(`${prefix}expiry-date`).value;
        let isValid = true;

        form.querySelectorAll('.error-message').forEach(el => el.remove());

        if (!code) {
            addErrorMessage(`${prefix}coupon-code`, 'Coupon code is required');
            isValid = false;
        } else if (code.length < 3) {
            addErrorMessage(`${prefix}coupon-code`, 'Code must be at least 3 characters');
            isValid = false;
        }

        if (!discountValue) {
            addErrorMessage(`${prefix}discount-value`, 'Discount value is required');
            isValid = false;
        } else if (Number(discountValue) <= 0) {
            addErrorMessage(`${prefix}discount-value`, 'Discount must be greater than 0');
            isValid = false;
        }

        if (minOrderValue && Number(minOrderValue) < 0) {
            addErrorMessage(`${prefix}min-order-value`, 'Minimum order value cannot be negative');
            isValid = false;
        }

        
        if (!expiryDate) {
            addErrorMessage(`${prefix}expiry-date`, 'Expiry date is required');
            isValid = false;
        } else if (new Date(expiryDate) < new Date()) {
            addErrorMessage(`${prefix}expiry-date`, 'Expiry date must be in the future');
            isValid = false;
        }

        return isValid;
    }

    function addErrorMessage(fieldId, message) {
        const field = document.getElementById(fieldId);
        const error = document.createElement('span');
        error.className = 'error-message';
        error.style.color = 'red';
        error.style.fontSize = '12px';
        error.textContent = message;
        field.parentElement.appendChild(error);
    }

    // Handle add form submission
    if (addCouponForm) {
        addCouponForm.addEventListener("submit", async (e) => {
            e.preventDefault();
            debugLog('Add form submission triggered');

            if (!validateForm('add-coupon-form')) return;

            const formData = {
                code: document.getElementById("coupon-code").value.trim(),
                discountValue: document.getElementById("discount-value").value.trim(),
                minOrderValue: document.getElementById("min-order-value").value.trim(),
                expiryDate: document.getElementById("expiry-date").value,
                isActive: document.getElementById("status").value
            };

            try {
                debugLog('Sending add coupon data:', formData);
                const response = await fetch("/admin/coupons/add", {
                    method: "POST",
                    headers: { "Content-Type": "application/json" },
                    body: JSON.stringify(formData)
                });
                const result = await response.json();
                debugLog('Add server response:', result);

                if (result.success) {
                    closeModal("add-modal"); // Close modal first
                    Swal.fire({
                        title: 'Success',
                        text: result.message,
                        icon: 'success',
                        confirmButtonText: 'OK'
                    }).then(() => {
                        location.reload();
                        addCouponForm.reset();
                    });
                } else {
                    closeModal("add-modal"); // Close modal first

                    Swal.fire('Error', result.message, 'error');
                }
            } catch (error) {
                closeModal("add-modal"); // Close modal first

                console.error("Error adding coupon:", error);
                Swal.fire('Error', 'Failed to add coupon.', 'error');
            }
        });
        debugLog('Add form listener attached');
    }

    // Handle update form submission
    if (updateCouponForm) {
        updateCouponForm.addEventListener("submit", async (e) => {
            e.preventDefault();
            debugLog('Update form submission triggered');

            if (!validateForm('update-coupon-form', true)) return;

            const formData = {
                id: document.getElementById("update-coupon-id").value,
                code: document.getElementById("update-coupon-code").value.trim(),
                discountValue: document.getElementById("update-discount-value").value.trim(),
                minOrderValue: document.getElementById("update-min-order-value").value.trim(),
                expiryDate: document.getElementById("update-expiry-date").value,
                isActive: document.getElementById("update-status").value
            };

            try {
                debugLog('Sending update coupon data:', formData);
                const response = await fetch(`/admin/coupons/update/${formData.id}`, {
                    method: "PUT",
                    headers: { "Content-Type": "application/json" },
                    body: JSON.stringify(formData)
                });
                const result = await response.json();
                debugLog('Update server response:', result);

                if (result.success) {
                    closeModal("update-modal"); // Close modal first
                    Swal.fire({
                        title: 'Success',
                        text: result.message,
                        icon: 'success',
                        confirmButtonText: 'OK'
                    }).then(() => {
                        location.reload();
                        updateCouponForm.reset();
                    });
                } else {
                    closeModal("update-modal"); // Close modal first

                    Swal.fire('Error', result.message, 'error');
                }
            } catch (error) {
                console.error("Error updating coupon:", error);
                Swal.fire('Error', 'Failed to update coupon.', 'error');
            }
        });
        debugLog('Update form listener attached');
    }
});


</script>

</body>
</html>