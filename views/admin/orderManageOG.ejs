<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Order Management</title>
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css">
    <link rel="stylesheet" href="/css/adminSidebar.css">
    <link rel="stylesheet" href="/css/orderManage.css">
</head>
<body>
    <%- include('../partials/adminSidebar') %>

    <div class="container my-5">
        <!-- Header Section -->
        <header class="header d-flex justify-content-between align-items-center mb-4">
            <h1>Order Management</h1>
            <div class="search-section">
                <input type="text" id="search-input" class="form-control search-input" placeholder="Search by Order ID...">
                <button class="btn reset-btn" onclick="resetSearch()">
                    <i class="fas fa-sync-alt"></i> Reset
                </button>
            </div>
        </header>

        <!-- Orders Table -->
        <div class="card">


           
            <table class="table order-table table-hover">
                <thead>
                    <tr>
                        <th>Order ID</th>
                        <th>Name</th>
                        <th>Status</th>
                        <th>Price</th>
                        <th>Date</th>
                        <th>Actions</th>
                    </tr>
                </thead>
                <tbody>
                    <% orders.forEach(order => { %>
                        <tr>
                            <td><%= order.orderID %></td>
                            <td><%= order.user.name %></td>
                            <td><%= order.orderStatus %></td>
                            <td>₹<%= order.totalAmount %></td>
                            <td><%= new Date(order.orderDate).toLocaleDateString() %></td>
                            <td>
                                <!-- Show Details Button -->
                                <button class="btn btn-primary view-details" data-order='<%- JSON.stringify(order) %>'>
                                    View Details
                                </button>
                            </td>
                        </tr>
                    <% }) %>
                </tbody>
            </table>
            
            <!-- Pagination -->
            <nav>
                <ul class="pagination">
                    <% for(let i = 1; i <= totalPages; i++) { %>
                        <li class="page-item <%= currentPage === i ? 'active' : '' %>">
                            <a class="page-link" href="?page=<%= i %>"><%= i %></a>
                        </li>
                    <% } %>
                </ul>
            </nav>
            
            <!-- Modal -->
            <!-- Order Details Modal -->
            <div class="modal fade" id="orderDetailsModal" tabindex="-1" aria-labelledby="orderDetailsModalLabel" aria-hidden="true">
                <div class="modal-dialog modal-lg">
                    <div class="modal-content">
                        <div class="modal-header">
                            <h5 class="modal-title" id="orderDetailsModalLabel">Order Details</h5>
                            <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                        </div>
                        <div class="modal-body">
                            <p><strong>Order ID:</strong> <span id="modalOrderId"></span></p>
                            <p><strong>Date:</strong> <span id="modalOrderDate"></span></p>
                            <p><strong>Total Amount:</strong> ₹<span id="modalTotalAmount"></span></p>
            
                            <h6>Products:</h6>
                            <ul id="modalProducts" class="list-group">
                                <!-- Product details will be dynamically inserted here -->
                            </ul>
            
                            <h6 class="mt-3">Shipping Details:</h6>
                            <p id="modalShipping"></p>
                      
                  
                            <h6 class="mt-3">Order Status:</h6>
                            <select id="modalOrderStatus" class="form-select">
                                <option value="Pending">Pending</option>
                                <option value="Processing">Processing</option>
                                <option value="Shipped">Shipped</option>
                                <option value="Delivered">Delivered</option>
                                <option value="Cancelled">Cancelled</option>
                            </select>
                          
                 
                            <button id="saveStatusBtn" class="btn btn-primary mt-3">Save Changes</button>
                        </div>
                    </div>
                </div>
            </div>
            
            


            </div>
          

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
    
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>

    <!-- <script>
    document.addEventListener("DOMContentLoaded", function () {
        document.querySelectorAll(".view-details").forEach(button => {
            button.addEventListener("click", function () {
                let order = JSON.parse(this.getAttribute("data-order"));

                document.getElementById("modalOrderID").textContent = order.orderID;
                document.getElementById("modalUser").textContent = order.user.name;
                document.getElementById("modalStatus").textContent = order.orderStatus;
                document.getElementById("modalTotal").textContent = order.totalAmount;
                document.getElementById("modalDate").textContent = new Date(order.orderDate).toLocaleDateString();

                // Shipping details
                let shipping = order.shippingAddress;
                document.getElementById("modalShipping").innerHTML = `
                    ${shipping.fullName}, ${shipping.address}, ${shipping.city}, ${shipping.state}, ${shipping.country} - ${shipping.pincode}
                `;

                // Products list
                let productList = document.getElementById("modalProducts");
                productList.innerHTML = "";
                order.products.forEach(product => {
                    let li = document.createElement("li");
                    li.textContent = `${product.name} - ₹${product.price} x ${product.quantity} (${product.productStatus})`;
                    productList.appendChild(li);
                });

                // Show modal
                let orderModal = new bootstrap.Modal(document.getElementById("orderModal"));
                orderModal.show();
            });
        });
    });




document.addEventListener("DOMContentLoaded", function () {
    let selectedOrderId = null;
  
    // Open Modal with Order Details
    document.querySelectorAll(".view-order-btn").forEach(button => {
        button.addEventListener("click", function () {
            selectedOrderId = this.dataset.orderId; // Get order ID from button
            fetch(`/admin/order/${selectedOrderId}`)
                .then(response => response.json())
                .then(order => {
                    document.getElementById("modalOrderId").textContent = order._id;
                    document.getElementById("modalOrderDate").textContent = new Date(order.orderDate).toLocaleDateString();
                    document.getElementById("modalTotalAmount").textContent = order.totalAmount;
                    document.getElementById("modalShipping").textContent = `${order.shippingAddress.fullName}, ${order.shippingAddress.address}, ${order.shippingAddress.city}`;
                    
                    let productsList = document.getElementById("modalProducts");
                    productsList.innerHTML = "";
                    
                    order.products.forEach(product => {
                        let listItem = document.createElement("li");
                        listItem.classList.add("list-group-item");

                        listItem.innerHTML = `
                            <strong>${product.name}</strong> - $${product.price} (Qty: ${product.quantity}) 
                            <select class="form-select status-dropdown" data-product-id="${product.product}">
                                <option value="Pending" ${product.productStatus === "Pending" ? "selected" : ""}>Pending</option>
                                <option value="Processing" ${product.productStatus === "Processing" ? "selected" : ""}>Processing</option>
                                <option value="Shipped" ${product.productStatus === "Shipped" ? "selected" : ""}>Shipped</option>
                                <option value="Delivered" ${product.productStatus === "Delivered" ? "selected" : ""}>Delivered</option>
                                <option value="Cancelled" ${product.productStatus === "Cancelled" ? "selected" : ""}>Cancelled</option>
                            </select>
                        `;
                        productsList.appendChild(listItem);
                    });

                    // Show the Modal
                    new bootstrap.Modal(document.getElementById("orderDetailsModal")).show();
                })
                .catch(error => console.error("Error fetching order details:", error));
        });
    });

    // Save Status Updates
    document.getElementById("saveStatusBtn").addEventListener("click", function () {
        let updatedStatuses = [];
        document.querySelectorAll(".status-dropdown").forEach(select => {
            updatedStatuses.push({
                productId: select.dataset.productId,
                newStatus: select.value
            });
        });

        fetch(`/admin/order/update-status`, {
            method: "POST",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify({ orderId: selectedOrderId, products: updatedStatuses })
        })
        .then(response => response.json())
        .then(data => {
            alert(data.message); // Show confirmation message
            window.location.reload(); // Reload the page to update UI
        })
        .catch(error => console.error("Error updating status:", error));
    });
});
</script>

    -->


 <!-- <script>
    
    document.addEventListener("DOMContentLoaded", function () {
        document.querySelectorAll(".view-details").forEach(button => {
    button.addEventListener("click", function () {
        try {
            let order = JSON.parse(this.getAttribute("data-order"));


            document.getElementById("modalOrderId").textContent = order._id || "N/A";


            let orderDate = order.orderDate?.$date ? new Date(order.orderDate.$date) : null;
            document.getElementById("modalOrderDate").textContent = orderDate ? orderDate.toLocaleDateString("en-IN") : "N/A";

            document.getElementById("modalTotalAmount").textContent = order.totalAmount || "0";


            let shipping = order.shippingAddress || {};
            document.getElementById("modalShipping").textContent = 
                `${shipping.fullName || "N/A"}, ${shipping.address || "N/A"}, ${shipping.city || "N/A"}, ${shipping.state || "N/A"}, ${shipping.country || "N/A"}, ${shipping.pincode || "N/A"}`;

          
            let productList = document.getElementById("modalProducts");
            productList.innerHTML = "";

            if (Array.isArray(order.products)) {
                order.products.forEach(product => {
                    let listItem = document.createElement("li");
                    listItem.classList.add("list-group-item", "d-flex", "align-items-center");

                    listItem.innerHTML = `
                        <img src="${product.image}" alt="${product.name}" class="me-3 rounded" style="width: 60px; height: 60px; object-fit: cover;">
                        <div>
                            <strong>${product.name}</strong> - ₹${product.price} (Qty: ${product.quantity}) <br>
                            <span class="badge bg-${getBadgeClass(product.productStatus)}">${product.productStatus}</span>
                            ${product.productStatus === "Cancelled" ? `<br><small class="text-danger">Reason: ${product.productCancelreason}</small>` : ""}
                        </div>
                    `;
                    productList.appendChild(listItem);
                });
            }


            let statusDropdown = document.getElementById("modalOrderStatus");
            statusDropdown.value = order.orderStatus || "Pending"; 

     
            let orderModal = new bootstrap.Modal(document.getElementById("orderDetailsModal"));
            orderModal.show();

        } catch (error) {
            console.error("Error parsing order details:", error);
            alert("Failed to load order details.");
        }
    });
});


function getBadgeClass(status) {
    switch (status) {
        case "Pending": return "warning";
        case "Processing": return "primary";
        case "Shipped": return "info";
        case "Delivered": return "success";
        case "Cancelled": return "danger";
        default: return "secondary";
    }
}



    document.getElementById("saveStatusBtn").addEventListener("click", function () {
        let selectedOrderId = document.getElementById("modalOrderId").textContent;
        let newStatus = document.getElementById("modalOrderStatus").value; 

        fetch(`/admin/order/update-status`, {
            method: "PATCH",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify({ orderId: selectedOrderId, newStatus: newStatus }) 
        })
        .then(response => response.json())
        .then(data => {
            Swal.fire("Success", data.message, "success").then(() => {
                window.location.reload();
            });
        })
        .catch(error => console.error("Error updating order status:", error));
    });
});


 </script>

 -->




 <script>
    // Define CSS for the modal to ensure it works properly
const modalStyle = document.createElement('style');
modalStyle.textContent = `
.modal {
    display: none;
    position: fixed;
    z-index: 1000;
    left: 0;
    top: 0;
    width: 100%;
    height: 100%;
    background-color: rgba(0,0,0,0.4);
}

.modal-content {
    background-color: #fefefe;
    margin: 15% auto;
    padding: 20px;
    border: 1px solid #888;
    width: 80%;
    max-width: 500px;
    border-radius: 5px;
    position: relative;
}

.close {
    color: #aaa;
    position: absolute;
    top: 10px;
    right: 15px;
    font-size: 28px;
    font-weight: bold;
    cursor: pointer;
}

.close:hover,
.close:focus {
    color: black;
    text-decoration: none;
}

#otpInput {
    width: 100%;
    padding: 12px;
    margin: 10px 0;
    border: 1px solid #ccc;
    border-radius: 4px;
    box-sizing: border-box;
}

#verifyOtp, #resendOtp {
    padding: 12px;
    margin: 10px 5px 10px 0;
    background-color: #4CAF50;
    color: white;
    border: none;
    border-radius: 4px;
    cursor: pointer;
}

#resendOtp {
    background-color: #f0ad4e;
}

#verifyOtp:disabled, #resendOtp:disabled {
    background-color: #cccccc;
    cursor: not-allowed;
}

.timer {
    margin-top: 10px;
    font-size: 14px;
    color: #666;
}
`;
document.head.appendChild(modalStyle);

// Add resend button and timer to the OTP modal if they don't exist
function setupOtpModal() {
    const modalContent = document.querySelector("#otpModal .modal-content");
    
    // Add timer element if it doesn't exist
    if (!document.getElementById("otpTimer")) {
        const timerDiv = document.createElement("div");
        timerDiv.id = "otpTimer";
        timerDiv.className = "timer";
        timerDiv.innerHTML = "Resend available in: <span id='countdown'>60</span> seconds";
        
        // Insert after the verify button
        const verifyBtn = document.getElementById("verifyOtp");
        verifyBtn.parentNode.insertBefore(timerDiv, verifyBtn.nextSibling);
    }
    
    // Add resend button if it doesn't exist
    if (!document.getElementById("resendOtp")) {
        const resendBtn = document.createElement("button");
        resendBtn.id = "resendOtp";
        resendBtn.type = "button";
        resendBtn.textContent = "Resend OTP";
        resendBtn.disabled = true; // Initially disabled
        
        // Insert after timer
        document.getElementById("otpTimer").parentNode.insertBefore(resendBtn, document.getElementById("otpTimer").nextSibling);
        
        // Add event listener for resend
        resendBtn.addEventListener("click", resendOTP);
    }
}

// Event listener for form submission
document.getElementById("createAccountForm").addEventListener("submit", async function (event) {
    event.preventDefault(); // Prevent default form submission

    let isValid = true;

    // Get form values
    const name = document.getElementById("name").value.trim();
    const email = document.getElementById("email").value.trim();
    const password = document.getElementById("password").value.trim();
    const confirmPassword = document.getElementById("confirmPassword").value.trim();
    const phone = document.getElementById("phone").value.trim();
    
    // Store form data for later use
    window.formData = {
        name,
        email,
        password,
        phone
    };

    // Validation patterns
    const emailPattern = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
    const passwordPattern = /^(?=.*[A-Za-z])(?=.*\d)[A-Za-z\d]{8,}$/;
    const phonePattern = /^[0-9]{10}$/;

    // Clear previous error messages
    document.querySelectorAll(".error").forEach(el => el.remove());

    function showError(input, message) {
        const error = document.createElement("small");
        error.classList.add("error");
        error.style.color = "red";
        error.innerText = message;
        input.parentNode.insertBefore(error, input.nextSibling);
    }

    // Validate inputs
    if (!name) {
        showError(document.getElementById("name"), "Name cannot be empty.");
        isValid = false;
    }
    if (!emailPattern.test(email)) {
        showError(document.getElementById("email"), "Enter a valid email.");
        isValid = false;
    }
    if (!passwordPattern.test(password)) {
        showError(document.getElementById("password"), "Password must be at least 8 characters, include a letter and a number.");
        isValid = false;
    }
    if (password !== confirmPassword) {
        showError(document.getElementById("confirmPassword"), "Passwords do not match.");
        isValid = false;
    }
    if (!phonePattern.test(phone)) {
        showError(document.getElementById("phone"), "Enter a valid 10-digit phone number.");
        isValid = false;
    }

    // Stop if validation fails
    if (!isValid) return;

    // Disable the submit button to prevent multiple requests
    const submitButton = document.getElementById("createAccount");
    submitButton.disabled = true;
    submitButton.innerText = "Sending OTP...";

    // Send OTP request to the server
    try {
        const response = await fetch("/user/signup/send-otp", {
            method: "POST",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify({ email })
        });

        const data = await response.json();
        if (response.ok) {
            // Setup the OTP modal with timer and resend button
            setupOtpModal();
            
            // Show the OTP modal
            const otpModal = document.getElementById("otpModal");
            otpModal.style.display = "block";
            
            // Focus on the OTP input field
            document.getElementById("otpInput").focus();
            
            // Start the resend timer
            startResendTimer();
        } else {
            alert(data.error || "Failed to send OTP");
        }
    } catch (error) {
        console.error("Error sending OTP:", error);
        alert("Error sending OTP");
    }

    // Re-enable submit button
    submitButton.disabled = false;
    submitButton.innerText = "Create Account";
});

// Start the countdown timer for OTP resend
function startResendTimer() {
    const countdownEl = document.getElementById("countdown");
    const resendBtn = document.getElementById("resendOtp");
    let timeLeft = 60; // 60 seconds countdown
    
    resendBtn.disabled = true;
    
    const timerId = setInterval(() => {
        timeLeft--;
        countdownEl.textContent = timeLeft;
        
        if (timeLeft <= 0) {
            clearInterval(timerId);
            document.getElementById("otpTimer").textContent = "You can now resend the OTP";
            resendBtn.disabled = false;
        }
    }, 1000);
    
    // Store the timer ID so we can clear it if necessary
    window.currentTimerId = timerId;
}

// Function to resend OTP
function resendOTP() {
    const email = window.formData.email;
    const resendBtn = document.getElementById("resendOtp");
    
    // Disable button and update text
    resendBtn.disabled = true;
    resendBtn.textContent = "Sending...";
    
    fetch("/user/signup/send-otp", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ email })
    })
    .then(response => response.json())
    .then(data => {
        if (response.ok) {
            // Clear any existing timer
            if (window.currentTimerId) {
                clearInterval(window.currentTimerId);
            }
            
            // Reset the countdown
            document.getElementById("otpTimer").innerHTML = "Resend available in: <span id='countdown'>60</span> seconds";
            startResendTimer();
            
            alert("New OTP sent to your email!");
        } else {
            alert(data.error || "Failed to resend OTP");
            resendBtn.disabled = false;
        }
    })
    .catch(error => {
        console.error("Error resending OTP:", error);
        alert("Error resending OTP");
        resendBtn.disabled = false;
    })
    .finally(() => {
        resendBtn.textContent = "Resend OTP";
    });
}

// Close modal when clicking the close button
document.querySelector(".close").addEventListener("click", function() {
    document.getElementById("otpModal").style.display = "none";
    // Clear any active timers when closing modal
    if (window.currentTimerId) {
        clearInterval(window.currentTimerId);
    }
});

// Also close modal when clicking outside the modal content
window.addEventListener("click", function(event) {
    const modal = document.getElementById("otpModal");
    if (event.target === modal) {
        modal.style.display = "none";
        // Clear any active timers when closing modal
        if (window.currentTimerId) {
            clearInterval(window.currentTimerId);
        }
    }
});

// OTP Verification - Modified to match backend expectations
document.getElementById("verifyOtp").addEventListener("click", async function () {
    const otp = document.getElementById("otpInput").value.trim();
    
    // Get all form data
    const { name, email, password, phone } = window.formData;

    if (!otp) {
        alert("Please enter the OTP.");
        return;
    }

    // Disable verify button to prevent multiple requests
    const verifyButton = document.getElementById("verifyOtp");
    verifyButton.disabled = true;
    verifyButton.innerText = "Verifying...";

    try {
        // Send verification request with ALL required fields
        const response = await fetch("/user/signup/verify-otp", {
            method: "POST",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify({ 
                email, 
                otp, 
                name, 
                password, 
                phone 
            })
        });

        const data = await response.json();
        
        if (response.ok) {
            alert("Account created successfully! Redirecting...");
            
            // Redirect based on server response or default to home
            if (data.redirect) {
                window.location.href = data.redirect;
            } else {
                window.location.href = "/user/home";
            }
        } else {
            alert(data.error || "Invalid OTP");
        }
    } catch (error) {
        console.error("Error during verification:", error);
        alert("Error verifying OTP");
    }

    // Re-enable verify button
    verifyButton.disabled = false;
    verifyButton.innerText = "Verify OTP";
});
 </script>
</body>
</html>