<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Product Management</title>
    <link href="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.12/cropper.min.css" rel="stylesheet">
    <style>
        :root {
            --primary-color: #2563eb;
            --error-color: #dc2626;
            --success-color: #16a34a;
        }

        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
            font-family: 'Segoe UI', system-ui, sans-serif;
        }

        body {
            background-color: #f3f4f6;
            color: #1f2937;
            line-height: 1.5;
            padding: 2rem;
        }

        .container {
            max-width: 1200px;
            margin: 0 auto;
        }

        .card {
            background: white;
            border-radius: 8px;
            box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
            padding: 2rem;
        }

        .form-title {
            font-size: 1.5rem;
            font-weight: 600;
            margin-bottom: 1.5rem;
            color: #111827;
        }

        .form-group {
            margin-bottom: 1.5rem;
        }

        .form-label {
            display: block;
            margin-bottom: 0.5rem;
            font-weight: 500;
            color: #374151;
        }

        .form-control {
            width: 100%;
            padding: 0.75rem;
            border: 1px solid #d1d5db;
            border-radius: 6px;
            font-size: 1rem;
            transition: border-color 0.2s;
        }

        .form-control:focus {
            outline: none;
            border-color: var(--primary-color);
            box-shadow: 0 0 0 3px rgba(37, 99, 235, 0.1);
        }

        .image-upload-container {
            display: grid;
            grid-template-columns: repeat(3, 1fr);
            gap: 1rem;
            margin-bottom: 1rem;
        }

        .image-upload-box {
            border: 2px dashed #ddd;
            padding: 1rem;
            text-align: center;
            border-radius: 8px;
            position: relative;
        }

        .image-upload-box:hover {
            border-color: var(--primary-color);
        }

        .upload-label {
            display: block;
            cursor: pointer;
            padding: 1rem;
            background: #f3f4f6;
            border-radius: 4px;
            margin-bottom: 0.5rem;
        }

        .upload-label:hover {
            background: #e5e7eb;
        }

        .image-preview {
            width: 100%;
            height: 200px;
            object-fit: cover;
            border-radius: 4px;
            display: none;
        }

        .variant-item {
            margin-bottom: 1rem;
            display: flex;
            gap: 1rem;
        }

        .btn {
            padding: 0.75rem 1.5rem;
            border-radius: 6px;
            font-weight: 500;
            cursor: pointer;
            border: none;
            transition: all 0.2s;
        }

        .btn-primary {
            background-color: var(--primary-color);
            color: white;
        }

        .btn-primary:hover {
            background-color: #1d4ed8;
        }

        .btn-secondary {
            background-color: #6b7280;
            color: white;
        }

        .remove-image {
            position: absolute;
            top: 5px;
            right: 5px;
            background: rgba(0, 0, 0, 0.5);
            color: white;
            border: none;
            border-radius: 50%;
            width: 24px;
            height: 24px;
            cursor: pointer;
            display: none;
        }

        .error-message {
            color: var(--error-color);
            font-size: 0.875rem;
            margin-top: 0.5rem;
        }

        .modal {
            display: none;
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(0, 0, 0, 0.5);
            z-index: 1000;
        }

        .modal-content {
            position: absolute;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            background: white;
            padding: 2rem;
            border-radius: 8px;
            width: 90%;
            max-width: 600px;
        }

        .cropper-container {
            height: 400px;
            width: 100%;
        }

        .toast {
            position: fixed;
            bottom: 2rem;
            right: 2rem;
            padding: 1rem 1.5rem;
            border-radius: 6px;
            color: white;
            animation: slideIn 0.3s ease-out;
            z-index: 1000;
        }

        .toast-success {
            background-color: var(--success-color);
        }

        .toast-error {
            background-color: var(--error-color);
        }

        @keyframes slideIn {
            from { transform: translateX(100%); opacity: 0; }
            to { transform: translateX(0); opacity: 1; }
        }* Container styling */
.form-group {
    margin-bottom: 20px;
}

.form-label {
    display: block;
    font-weight: 600;
    margin-bottom: 10px;
}

.prod-form-group {
    margin-bottom: 20px;
}

.prod-form-label {
    display: block;
    font-weight: 600;
    margin-bottom: 10px;
}

/* Vertical column layout for images */
.prod-image-upload-container {
    width: 100%;
    max-width: 250px; /* Control the width of the column */
}

.prod-image-column {
    display: flex;
    flex-direction: column;
    gap: 15px;
}

/* Individual image box styling */
.prod-image-upload-box {
    width: 100%;
    border: 1px solid #e0e0e0;
    border-radius: 4px;
    background-color: #fff;
    overflow: hidden;
}

/* Image preview styling */
.prod-image-preview-wrapper {
    width: 100%;
    height: auto;
    display: flex;
    justify-content: center;
    align-items: center;
    background-color: #f9f9f9;
    padding: 10px;
}

.prod-image-preview {
    max-width: 100%;
    height: auto;
    display: block;
}

/* File input styling */
.prod-image-actions {
    text-align: center;
    padding: 10px;
    background-color: #007bff;
}

.prod-image-upload-box input[type="file"] {
    display: none;
}

.prod-upload-btn {
    display: inline-block;
    color: white;
    width: 100%;
    cursor: pointer;
    font-size: 14px;
}

/* No images state */
.prod-no-images {
    padding: 20px;
    text-align: center;
    background-color: #f9f9f9;
    border-radius: 4px;
    border: 1px dashed #ccc;
}

.prod-no-images p {
    margin-bottom: 15px;
    color: #666;
}
    </style>
</head>
<body>
    <div class="container">
        <div class="card">
            <h2 class="form-title">Update Product</h2>
            <form id="productForm" enctype="multipart/form-data">
                <input type="hidden" id="productId" value="<%= product._id %>">
    
                <div class="form-group">
                    <label class="form-label" for="name">Product Name</label>
                    <input type="text" id="name" name="name" class="form-control" value="<%= product.name %>">
                </div>
    
                <div class="form-group">
                    <label class="form-label" for="brand">Brand</label>
                    <input type="text" id="brand" name="brand" class="form-control" value="<%= product.brand %>">
                </div>
    
                <div class="form-group">
                    <label class="form-label" for="price">Price</label>
                    <input type="number" id="price" name="price" class="form-control" value="<%= product.price %>" min="0" step="0.01">
                </div>
    
                <div class="form-group">
                    <label class="form-label" for="description">Description</label>
                    <textarea id="description" name="description" class="form-control" rows="4"><%= product.description %></textarea>
                </div>
    
                <div class="form-group">
                    <label class="form-label" for="category">Category</label>
                    <select id="category" name="category" class="form-control">
                        <option value="">Select Category</option>
                        
                        <% categories.forEach(category => { %>
                            <option 
                                value="<%= category._id %>" 
                                <%= product.category && product.category._id.toString() === category._id.toString() ? "selected" : "" %>>
                                <%= category.name %>
                            </option>
                        <% }) %>
                    </select>
                    
                </div>
                
    
                <!-- <div class="form-group">
                    <label class="form-label">Product Images</label>
                    <div class="image-upload-container">
                        <% product.images.forEach((image, index) => { %>
                            <div class="image-upload-box">
                                <img class="image-preview" id="preview<%= index %>" src="<%= image %>" alt="Product Image">
                                
                                <input type="hidden" name="existingImages[]" value="<%= image %>">                     
                                <input type="file" name="images" accept="image/*" onchange="previewImage(event, <%= index %>)">
                            </div>
                        <% }) %>
                    </div>
                </div> -->

                <div class="prod-form-group">
                    <label class="prod-form-label">Product Images</label>
                    <div class="prod-image-upload-container">
                        <% if (product.images && product.images.length > 0) { %>
                            <div class="prod-image-column">
                                <% product.images.forEach((image, index) => { %>
                                    <div class="prod-image-upload-box">
                                        <div class="prod-image-preview-wrapper">
                                            <img class="prod-image-preview" id="prod-preview<%= index %>"
                                                src="<%= image %>"
                                                alt="Product Image">
                                        </div>
                                        
                                        <div class="prod-image-actions">
                                            <!-- Keep existing image as a hidden input -->
                                            <input type="hidden" name="existingImages[]" value="<%= image %>">
                                            
                                            <!-- Custom file input with label -->
                                            <label for="prod-image-upload-<%= index %>" class="prod-upload-btn">Replace Image</label>
                                            <input id="prod-image-upload-<%= index %>" type="file" name="images" 
                                                accept="image/*" onchange="previewProductImage(event, <%= index %>)">
                                        </div>
                                    </div>
                                <% }) %>
                            </div>
                        <% } else { %>
                            <div class="prod-no-images">
                                <p>No images available</p>
                                <label for="prod-new-image-upload" class="prod-upload-btn">Add Image</label>
                                <input id="prod-new-image-upload" type="file" name="images" accept="image/*" 
                                    onchange="previewProductImage(event, 0)">
                            </div>
                        <% } %>
                    </div>
                </div>
                
                
    
                <!-- Variants -->
                <div class="form-group">
                    <label class="form-label">Variants</label>
                    <div id="variants-container">
                        <% product.variants.forEach(variant => { %>
                            <div class="variant-item">
                                <input type="text" name="variants[][color]" placeholder="Color" class="form-control" value="<%= variant.color %>">
                                <input type="number" name="variants[][stock]" placeholder="Stock" min="0" class="form-control" value="<%= variant.stock %>">
                            </div>
                        <% }) %>
                    </div>
                    <button type="button" class="btn btn-secondary" onclick="addVariant()">Add Variant</button>
                </div>
    
                <div class="form-group">
                    <label class="form-label" for="status">Status</label>
                    <select id="status" name="status" class="form-control">
                        <option value="Active" <%= product.status === 'Active' ? 'selected' : '' %>>Active</option>
                        <option value="Inactive" <%= product.status === 'Inactive' ? 'selected' : '' %>>Inactive</option>
                    </select>
                </div>
    
                <button type="submit" class="btn btn-primary">Update Product</button>
            </form>
        </div>
    </div>

    <!-- Cropper Modal -->
    <div id="cropperModal" class="modal">
        <div class="modal-content">
            <div class="cropper-container">
                <img id="cropperImage" src="" alt="Image to crop">
            </div>
            <div style="margin-top: 1rem; display: flex; gap: 1rem;">
                <button class="btn btn-primary" onclick="cropImage()">Crop & Save</button>
                <button class="btn btn-secondary" onclick="cancelCrop()">Cancel</button>
            </div>
        </div>
    </div>
    <script>
        console.log("Checking if script is executing...");
    </script>
    




    <script src="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.12/cropper.min.js"></script>

    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>

<script>
    console.log("Checking if script is executing...");

// Check if CropperJS is loaded
console.log("CropperJS:", window.Cropper);

//preview image
function previewImage(event, index) {
    const file = event.target.files[0];
    if (file) {
        const reader = new FileReader();
        reader.onload = function (e) {
            const previewElement = document.getElementById(`preview${index}`);
            if (previewElement) {
                previewElement.src = e.target.result;
            }
        };
        reader.readAsDataURL(file);
    }
}



let cropper;
let currentImageInput;
const processedImages = new Map();
const form = document.getElementById('productForm');
console.log("Form Element:", form);

// Image Upload Handlers
document.querySelectorAll('input[type="file"]').forEach(input => {
    console.log("File input found:", input.id);
    input.addEventListener('change', function(e) {
        console.log("File input changed for:", input.id);
        const file = e.target.files[0];
        if (file && file.type.startsWith('image/')) {
            console.log("Valid image selected:", file.name);
            currentImageInput = input;
            const reader = new FileReader();
            reader.onload = function(e) {
                console.log("Image loaded for cropping");
                showCropper(e.target.result);
            };
            reader.readAsDataURL(file);
        }
    });
});


document.querySelectorAll('.remove-image').forEach(button => {
    console.log("Remove button found:", button.dataset.index);
    button.addEventListener('click', function() {
        console.log("Remove button clicked for index:", this.dataset.index);
        const index = this.dataset.index;
        const inputElement = document.getElementById(`image${index}`);
        const previewElement = document.getElementById(`preview${index}`);
        const uploadLabel = inputElement.parentElement;

        inputElement.value = '';
        previewElement.style.display = 'none';
        uploadLabel.style.display = 'block';
        this.style.display = 'none';
        processedImages.delete(`image${index}`);
    });
});

function showCropper(imageSrc) {
    console.log("Showing cropper modal");
    const modal = document.getElementById('cropperModal');
    const cropperImage = document.getElementById('cropperImage');

    modal.style.display = 'block';
    cropperImage.src = imageSrc;

    if (cropper) {
        cropper.destroy();
    }

    cropper = new Cropper(cropperImage, {
        aspectRatio: 1,
        viewMode: 2,
        autoCropArea: 1,
        responsive: true,
        restore: false
    });
}

function cropImage() {
    console.log("Cropping image...");
    const canvas = cropper.getCroppedCanvas({
        width: 600,
        height: 600
    });

    canvas.toBlob(blob => {
        console.log("Image cropped and converted to blob");
        const index = currentImageInput.id.replace('image', '');
        const previewElement = document.getElementById(`preview${index}`);
        const uploadLabel = currentImageInput.parentElement;
        const removeButton = uploadLabel.parentElement.querySelector('.remove-image');

        processedImages.set(currentImageInput.id, blob);
        console.log("Stored processed image:", processedImages);

        previewElement.src = URL.createObjectURL(blob);
        previewElement.style.display = 'block';
        uploadLabel.style.display = 'none';
        removeButton.style.display = 'block';

        document.getElementById('cropperModal').style.display = 'none';
        cropper.destroy();
    }, 'image/jpeg', 0.8);
}



















function validateForm() {
    console.log("Validating form...");
    let isValid = true;
    const required = form.querySelectorAll('[required]');
    console.log("Required fields found:", required.length);

    document.querySelectorAll('.error-message').forEach(error => {
        error.textContent = '';
    });

    required.forEach(field => {
        const errorDiv = field.nextElementSibling;
        if (!field.value.trim()) {
            console.log("Validation error for field:", field.name);
            errorDiv.textContent = `${field.name} is required`;
            isValid = false;
        }
    });

    const price = document.getElementById('price');
    if (price.value && parseFloat(price.value) <= 0) {
        console.log("Validation error: Price must be greater than 0");
        price.nextElementSibling.textContent = 'Price must be greater than 0';
        isValid = false;
    }

    if (processedImages.size === 0) {
        console.log("Validation error: No images uploaded");
        const imageError = document.querySelector('.image-upload-container').nextElementSibling;
        imageError.textContent = 'At least one product image is required';
        isValid = false;
    }

    return isValid;
}

form.addEventListener('submit', async function(e) {
    e.preventDefault();
    console.log("Form submission triggered");

    if (!validateForm()) {
        console.log("Form validation failed");
        return;
    }

    const formData = new FormData();
    formData.append('name', document.getElementById('name').value);
    formData.append('brand', document.getElementById('brand').value);
    formData.append('price', document.getElementById('price').value);
    formData.append('description', document.getElementById('description').value);
    formData.append('category', document.getElementById('category').value);
    formData.append('status', document.getElementById('status').value);


    const variants = [];
document.querySelectorAll(".variant-item").forEach((item) => {
  const color = item.querySelector('input[name="Color"]').value;
  const stock = item.querySelector('input[name="Stock"]').value;
  if (color && stock) {
    variants.push({ color, stock });
  }
});


formData.append("variants", JSON.stringify(variants));


processedImages.forEach((blob, key) => {
    const fileType = blob.type.split("/")[1]; 
    formData.append("images", blob, `image_${key}.${fileType}`);
});

    
    console.log("Final form data:", [...formData.entries()]);

try{
    const response = await fetch("/admin/products/update/:id", {
        method: "POST",
        body: formData,
    });

    const result = await response.json();
    console.log("📥 Server Response:", result);

    // ✅ Handle Success
    if (response.ok) {
    console.log("✅ Product saved successfully");
    form.reset();
    processedImages.clear();

    Swal.fire({
        title: "Success!",
        text: "Product saved successfully",
        icon: "success",
        confirmButtonText: "OK"
    });
} else {
    console.error("❌ Error:", result.error);

    Swal.fire({
        title: "Error!",
        text: result.error || "Something went wrong!",
        icon: "error",
        confirmButtonText: "Try Again"
    });
}

} catch (error) {
    console.error("❌ Error saving product:", error);
}

});


// Fetch Product Data & Pre-Fill Form Fields
async function fetchProduct(productId) {
  try {
    const response = await fetch(`/admin/products/edit/${productId}`);
    const product = await response.json();

    if (!response.ok) {
      throw new Error(product.error);
    }

    document.getElementById("name").value = product.name;
    document.getElementById("brand").value = product.brand;
    document.getElementById("price").value = product.price;
    document.getElementById("description").value = product.description;
    document.getElementById("category").value = product.category._id;
    document.getElementById("status").value = product.status;

    const variantsContainer = document.getElementById("variant-list");
    variantsContainer.innerHTML = "";
    product.variants.forEach((variant) => {
      const variantHTML = `
        <div class="variant-item">
          <input type="text" name="Color" value="${variant.color}" placeholder="Color">
          <input type="number" name="Stock" value="${variant.stock}" placeholder="Stock">
        </div>
      `;
      variantsContainer.insertAdjacentHTML("beforeend", variantHTML);
    });

    console.log("✅ Product data loaded:", product);
  } catch (error) {
    console.error("❌ Error fetching product:", error);
  }
}


//calling editing a product
document.addEventListener("DOMContentLoaded", function () {
  const productId = new URLSearchParams(window.location.search).get("id");
  if (productId) {
    fetchProduct(productId);
  }
});








</script>
</body>
</html>