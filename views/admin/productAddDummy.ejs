<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Product Management</title>
    <link href="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.12/cropper.min.css" rel="stylesheet">
    <style>
        :root {
            --primary-color: #2563eb;
            --error-color: #dc2626;
            --success-color: #16a34a;
        }

        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
            font-family: 'Segoe UI', system-ui, sans-serif;
        }

        body {
            background-color: #f3f4f6;
            color: #1f2937;
            line-height: 1.5;
            padding: 2rem;
        }

        .container {
            max-width: 1200px;
            margin: 0 auto;
        }

        .card {
            background: white;
            border-radius: 8px;
            box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
            padding: 2rem;
        }

        .form-title {
            font-size: 1.5rem;
            font-weight: 600;
            margin-bottom: 1.5rem;
            color: #111827;
        }

        .form-group {
            margin-bottom: 1.5rem;
        }

        .form-label {
            display: block;
            margin-bottom: 0.5rem;
            font-weight: 500;
            color: #374151;
        }

        .form-control {
            width: 100%;
            padding: 0.75rem;
            border: 1px solid #d1d5db;
            border-radius: 6px;
            font-size: 1rem;
            transition: border-color 0.2s;
        }

        .form-control:focus {
            outline: none;
            border-color: var(--primary-color);
            box-shadow: 0 0 0 3px rgba(37, 99, 235, 0.1);
        }

        .image-upload-container {
            display: grid;
            grid-template-columns: repeat(3, 1fr);
            gap: 1rem;
            margin-bottom: 1rem;
        }

        .image-upload-box {
            border: 2px dashed #ddd;
            padding: 1rem;
            text-align: center;
            border-radius: 8px;
            position: relative;
        }

        .image-upload-box:hover {
            border-color: var(--primary-color);
        }

        .upload-label {
            display: block;
            cursor: pointer;
            padding: 1rem;
            background: #f3f4f6;
            border-radius: 4px;
            margin-bottom: 0.5rem;
        }

        .upload-label:hover {
            background: #e5e7eb;
        }

        .image-preview {
            width: 100%;
            height: 200px;
            object-fit: cover;
            border-radius: 4px;
            display: none;
        }

        .variant-item {
            margin-bottom: 1rem;
            display: flex;
            gap: 1rem;
        }

        .btn {
            padding: 0.75rem 1.5rem;
            border-radius: 6px;
            font-weight: 500;
            cursor: pointer;
            border: none;
            transition: all 0.2s;
        }

        .btn-primary {
            background-color: var(--primary-color);
            color: white;
        }

        .btn-primary:hover {
            background-color: #1d4ed8;
        }

        .btn-secondary {
            background-color: #6b7280;
            color: white;
        }

        .remove-image {
            position: absolute;
            top: 5px;
            right: 5px;
            background: rgba(0, 0, 0, 0.5);
            color: white;
            border: none;
            border-radius: 50%;
            width: 24px;
            height: 24px;
            cursor: pointer;
            display: none;
        }

        .error-message {
            color: var(--error-color);
            font-size: 0.875rem;
            margin-top: 0.5rem;
        }

        .modal {
            display: none;
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(0, 0, 0, 0.5);
            z-index: 1000;
        }

        .modal-content {
            position: absolute;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            background: white;
            padding: 2rem;
            border-radius: 8px;
            width: 90%;
            max-width: 600px;
        }

        .cropper-container {
            height: 400px;
            width: 100%;
        }

        .toast {
            position: fixed;
            bottom: 2rem;
            right: 2rem;
            padding: 1rem 1.5rem;
            border-radius: 6px;
            color: white;
            animation: slideIn 0.3s ease-out;
            z-index: 1000;
        }

        .toast-success {
            background-color: var(--success-color);
        }

        .toast-error {
            background-color: var(--error-color);
        }

        @keyframes slideIn {
            from { transform: translateX(100%); opacity: 0; }
            to { transform: translateX(0); opacity: 1; }
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="card">
            <h2 class="form-title">Product Management</h2>
            <form id="productForm">
                <input type="hidden" id="productId">
                
                <div class="form-group">
                    <label class="form-label" for="name">Product Name</label>
                    <input type="text" id="name" name="Name" class="form-control" required>
                    <div class="error-message"></div>
                </div>

                <div class="form-group">
                    <label class="form-label" for="brand">Brand</label>
                    <input type="text" id="brand" name="Brand" class="form-control" required>
                    <div class="error-message"></div>
                </div>

                <div class="form-group">
                    <label class="form-label" for="price">Price</label>
                    <input type="number" id="price" name="Price" class="form-control" min="0" step="0.01" required>
                    <div class="error-message"></div>
                </div>

                <div class="form-group">
                    <label class="form-label" for="description">Description</label>
                    <textarea id="description" name="Description" class="form-control" rows="4" required></textarea>
                    <div class="error-message"></div>
                </div>

                <div class="form-group">
                    <label class="form-label" for="category">Category</label>
                    <select id="category" name="Category" class="form-control" required>
                        <option value="">Select Category</option>
                        <% categories.forEach(category => { %>
                            <option value="<%= category._id %>"><%= category.name %></option>
                        <% }) %>
                    </select>
                    <div class="error-message"></div>
                </div>
                

                <div class="form-group">
                    <label class="form-label">Product Images</label>
                    <div class="image-upload-container">
                        <div class="image-upload-box" id="upload-box-1">
                            <label class="upload-label">
                                <span>Upload Image 1</span>
                                <input type="file" id="image1" accept="image/*" style="display: none">
                            </label>
                            <img class="image-preview" id="preview1" alt="Preview 1">
                            <button type="button" class="remove-image" data-index="1">×</button>
                        </div>
                        <div class="image-upload-box" id="upload-box-2">
                            <label class="upload-label">
                                <span>Upload Image 2</span>
                                <input type="file" id="image2" accept="image/*" style="display: none">
                            </label>
                            <img class="image-preview" id="preview2" alt="Preview 2">
                            <button type="button" class="remove-image" data-index="2">×</button>
                        </div>
                        <div class="image-upload-box" id="upload-box-3">
                            <label class="upload-label">
                                <span>Upload Image 3</span>
                                <input type="file" id="image3" accept="image/*" style="display: none">
                            </label>
                            <img class="image-preview" id="preview3" alt="Preview 3">
                            <button type="button" class="remove-image" data-index="3">×</button>
                        </div>
                    </div>
                    <div class="error-message"></div>
                </div>

                <div class="form-group">
                    <label class="form-label">Variants</label>
                    <div id="variants-container">
                        <div class="variant-item">
                            <input type="text" name="Color" placeholder="Color" class="form-control">
                            <input type="number" name="Stock" placeholder="Stock" min="0" class="form-control">
                        </div>
                    </div>
                    <button type="button" class="btn btn-secondary" onclick="addVariant()">Add Variant</button>
                </div>

                <div class="form-group">
                    <label class="form-label" for="status">Status</label>
                    <select id="status" name="Status" class="form-control" required>
                        <option value="Active">Active</option>
                        <option value="Inactive">Inactive</option>
                    </select>
                </div>

                <button type="submit" class="btn btn-primary">Save Product</button>
            </form>
        </div>
    </div>

    <!-- Cropper Modal -->
    <div id="cropperModal" class="modal">
        <div class="modal-content">
            <div class="cropper-container">
                <img id="cropperImage" src="" alt="Image to crop">
            </div>
            <div style="margin-top: 1rem; display: flex; gap: 1rem;">
                <button class="btn btn-primary" onclick="cropImage()">Crop & Save</button>
                <button class="btn btn-secondary" onclick="cancelCrop()">Cancel</button>
            </div>
        </div>
    </div>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.12/cropper.min.js"></script>
    <script>
        let cropper;
        let currentImageInput;
        const processedImages = new Map();
        const form = document.getElementById('productForm');

        // Image Upload Handlers
        document.querySelectorAll('input[type="file"]').forEach(input => {
            input.addEventListener('change', function(e) {
                const file = e.target.files[0];
                if (file && file.type.startsWith('image/')) {
                    currentImageInput = input;
                    const reader = new FileReader();
                    reader.onload = function(e) {
                        showCropper(e.target.result);
                    };
                    reader.readAsDataURL(file);
                }
            });
        });

        // Remove Image Handlers
        document.querySelectorAll('.remove-image').forEach(button => {
            button.addEventListener('click', function() {
                const index = this.dataset.index;
                const inputElement = document.getElementById(`image${index}`);
                const previewElement = document.getElementById(`preview${index}`);
                const uploadLabel = inputElement.parentElement;

                inputElement.value = '';
                previewElement.style.display = 'none';
                uploadLabel.style.display = 'block';
                this.style.display = 'none';
                processedImages.delete(`image${index}`);
            });
        });

        function showCropper(imageSrc) {
            const modal = document.getElementById('cropperModal');
            const cropperImage = document.getElementById('cropperImage');
            
            modal.style.display = 'block';
            cropperImage.src = imageSrc;

            if (cropper) {
                cropper.destroy();
            }

            cropper = new Cropper(cropperImage, {
                aspectRatio: 1,
                viewMode: 2,
                autoCropArea: 1,
                responsive: true,
                restore: false
            });
        }

        function cropImage() {
            const canvas = cropper.getCroppedCanvas({
                width: 600,
                height: 600
            });

            canvas.toBlob(blob => {
                const index = currentImageInput.id.replace('image', '');
                const previewElement = document.getElementById(`preview${index}`);
                const uploadLabel = currentImageInput.parentElement;
                const removeButton = uploadLabel.parentElement.querySelector('.remove-image');

                // Store processed image
                processedImages.set(currentImageInput.id, blob);

                // Update preview
                previewElement.src = URL.createObjectURL(blob);
                previewElement.style.display = 'block';
                uploadLabel.style.display = 'none';
                removeButton.style.display = 'block';

                // Close modal
                document.getElementById('cropperModal').style.display = 'none';
                cropper.destroy();
            }, 'image/jpeg', 0.8);
        }

        function cancelCrop() {
            document.getElementById('cropperModal').style.display = 'none';
            currentImageInput.value = '';
            if (cropper) {
                cropper.destroy();
            }
        }

        function addVariant() {
            const container = document.getElementById('variants-container');
            const variantDiv = document.createElement('div');
            variantDiv.className = 'variant-item';
            variantDiv.innerHTML = `
                <input type="text" name="Color" placeholder="Color" class="form-control">
                <input type="number" name="Stock" placeholder="Stock" min="0" class="form-control">
            `;
            container.appendChild(variantDiv);
        }

        function showToast(message, type) {
            const toast = document.createElement('div');
            toast.className = `toast toast-${type}`;
            toast.textContent = message;
            document.body.appendChild(toast);

            setTimeout(() => {
                toast.remove();
            }, 3000);
        }

        function validateForm() {
            let isValid = true;
            const required = form.querySelectorAll('[required]');

            // Clear previous error messages
            document.querySelectorAll('.error-message').forEach(error => {
                error.textContent = '';
            });

            // Validate required fields
            required.forEach(field => {
                const errorDiv = field.nextElementSibling;
                if (!field.value.trim()) {
                    errorDiv.textContent = `${field.name} is required`;
                    isValid = false;
                }
            });

            // Validate price
            const price = document.getElementById('price');
            if (price.value && parseFloat(price.value) <= 0) {
                price.nextElementSibling.textContent = 'Price must be greater than 0';
                isValid = false;
            }

            // Validate at least one image
            if (processedImages.size === 0) {
                const imageError = document.querySelector('.image-upload-container').nextElementSibling;
                imageError.textContent = 'At least one product image is required';
                isValid = false;
            }

            // Validate variants
            const variants = document.querySelectorAll('.variant-item');
            let hasValidVariant = false;
            variants.forEach(variant => {
                const color = variant.querySelector('[name="Color"]').value;
                const stock = variant.querySelector('[name="Stock"]').value;
                if (color.trim() && stock.trim()) {
                    hasValidVariant = true;
                }
            });

            if (!hasValidVariant) {
                showToast('At least one complete variant is required', 'error');
                isValid = false;
            }

            return isValid;
        }

        // Form submission handler
        form.addEventListener('submit', async function(e) {
            e.preventDefault();

            if (!validateForm()) {
                showToast('Please fix the errors before submitting', 'error');
                return;
            }

            // Collect form data
            const formData = new FormData();
            formData.append('name', document.getElementById('name').value);
            formData.append('brand', document.getElementById('brand').value);
            formData.append('price', document.getElementById('price').value);
            formData.append('description', document.getElementById('description').value);
            formData.append('category', document.getElementById('category').value);
            formData.append('status', document.getElementById('status').value);

            // Add processed images
            processedImages.forEach((blob, id) => {
                formData.append(id, blob);
            });

            // Add variants
            const variants = [];
            document.querySelectorAll('.variant-item').forEach(variant => {
                const color = variant.querySelector('[name="Color"]').value;
                const stock = variant.querySelector('[name="Stock"]').value;
                if (color.trim() && stock.trim()) {
                    variants.push({ color, stock: parseInt(stock) });
                }
            });
            formData.append('variants', JSON.stringify(variants));

            try {
                // Simulate API call
                await new Promise(resolve => setTimeout(resolve, 1000));
                
                // Show success message
                showToast('Product saved successfully!', 'success');
                
                // Reset form
                form.reset();
                processedImages.clear();
                document.querySelectorAll('.image-preview').forEach(preview => {
                    preview.style.display = 'none';
                });
                document.querySelectorAll('.upload-label').forEach(label => {
                    label.style.display = 'block';
                });
                document.querySelectorAll('.remove-image').forEach(button => {
                    button.style.display = 'none';
                });
                
                // Reset variants
                const variantsContainer = document.getElementById('variants-container');
                variantsContainer.innerHTML = `
                    <div class="variant-item">
                        <input type="text" name="Color" placeholder="Color" class="form-control">
                        <input type="number" name="Stock" placeholder="Stock" min="0" class="form-control">
                    </div>
                `;
            } catch (error) {
                showToast('Error saving product. Please try again.', 'error');
                console.error('Error:', error);
            }
        });

        // Initialize the form
        function init() {
            // You can add any initialization logic here
            // For example, loading existing product data, fetching categories, etc.
        }

        // Call init when the page loads
        init();
    </script>
</body>
</html>